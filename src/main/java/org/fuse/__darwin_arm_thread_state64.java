// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __darwin_arm_thread_state64 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(29, Constants$root.C_LONG_LONG$LAYOUT).withName("__x"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__fp"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__lr"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__sp"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__pc"),
        Constants$root.C_INT$LAYOUT.withName("__cpsr"),
        Constants$root.C_INT$LAYOUT.withName("__pad")
    ).withName("__darwin_arm_thread_state64");
    public static MemoryLayout $LAYOUT() {
        return __darwin_arm_thread_state64.$struct$LAYOUT;
    }
    public static MemorySegment __x$slice(MemorySegment seg) {
        return seg.asSlice(0, 232);
    }
    static final VarHandle __fp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__fp"));
    public static VarHandle __fp$VH() {
        return __darwin_arm_thread_state64.__fp$VH;
    }
    public static long __fp$get(MemorySegment seg) {
        return (long)__darwin_arm_thread_state64.__fp$VH.get(seg);
    }
    public static void __fp$set( MemorySegment seg, long x) {
        __darwin_arm_thread_state64.__fp$VH.set(seg, x);
    }
    public static long __fp$get(MemorySegment seg, long index) {
        return (long)__darwin_arm_thread_state64.__fp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __fp$set(MemorySegment seg, long index, long x) {
        __darwin_arm_thread_state64.__fp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __lr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__lr"));
    public static VarHandle __lr$VH() {
        return __darwin_arm_thread_state64.__lr$VH;
    }
    public static long __lr$get(MemorySegment seg) {
        return (long)__darwin_arm_thread_state64.__lr$VH.get(seg);
    }
    public static void __lr$set( MemorySegment seg, long x) {
        __darwin_arm_thread_state64.__lr$VH.set(seg, x);
    }
    public static long __lr$get(MemorySegment seg, long index) {
        return (long)__darwin_arm_thread_state64.__lr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __lr$set(MemorySegment seg, long index, long x) {
        __darwin_arm_thread_state64.__lr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __sp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__sp"));
    public static VarHandle __sp$VH() {
        return __darwin_arm_thread_state64.__sp$VH;
    }
    public static long __sp$get(MemorySegment seg) {
        return (long)__darwin_arm_thread_state64.__sp$VH.get(seg);
    }
    public static void __sp$set( MemorySegment seg, long x) {
        __darwin_arm_thread_state64.__sp$VH.set(seg, x);
    }
    public static long __sp$get(MemorySegment seg, long index) {
        return (long)__darwin_arm_thread_state64.__sp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __sp$set(MemorySegment seg, long index, long x) {
        __darwin_arm_thread_state64.__sp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __pc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__pc"));
    public static VarHandle __pc$VH() {
        return __darwin_arm_thread_state64.__pc$VH;
    }
    public static long __pc$get(MemorySegment seg) {
        return (long)__darwin_arm_thread_state64.__pc$VH.get(seg);
    }
    public static void __pc$set( MemorySegment seg, long x) {
        __darwin_arm_thread_state64.__pc$VH.set(seg, x);
    }
    public static long __pc$get(MemorySegment seg, long index) {
        return (long)__darwin_arm_thread_state64.__pc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __pc$set(MemorySegment seg, long index, long x) {
        __darwin_arm_thread_state64.__pc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __cpsr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__cpsr"));
    public static VarHandle __cpsr$VH() {
        return __darwin_arm_thread_state64.__cpsr$VH;
    }
    public static int __cpsr$get(MemorySegment seg) {
        return (int)__darwin_arm_thread_state64.__cpsr$VH.get(seg);
    }
    public static void __cpsr$set( MemorySegment seg, int x) {
        __darwin_arm_thread_state64.__cpsr$VH.set(seg, x);
    }
    public static int __cpsr$get(MemorySegment seg, long index) {
        return (int)__darwin_arm_thread_state64.__cpsr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __cpsr$set(MemorySegment seg, long index, int x) {
        __darwin_arm_thread_state64.__cpsr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __pad$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__pad"));
    public static VarHandle __pad$VH() {
        return __darwin_arm_thread_state64.__pad$VH;
    }
    public static int __pad$get(MemorySegment seg) {
        return (int)__darwin_arm_thread_state64.__pad$VH.get(seg);
    }
    public static void __pad$set( MemorySegment seg, int x) {
        __darwin_arm_thread_state64.__pad$VH.set(seg, x);
    }
    public static int __pad$get(MemorySegment seg, long index) {
        return (int)__darwin_arm_thread_state64.__pad$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __pad$set(MemorySegment seg, long index, int x) {
        __darwin_arm_thread_state64.__pad$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


