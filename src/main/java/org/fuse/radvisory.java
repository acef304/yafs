// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class radvisory {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("ra_offset"),
        Constants$root.C_INT$LAYOUT.withName("ra_count"),
        MemoryLayout.paddingLayout(32)
    ).withName("radvisory");
    public static MemoryLayout $LAYOUT() {
        return radvisory.$struct$LAYOUT;
    }
    static final VarHandle ra_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ra_offset"));
    public static VarHandle ra_offset$VH() {
        return radvisory.ra_offset$VH;
    }
    public static long ra_offset$get(MemorySegment seg) {
        return (long)radvisory.ra_offset$VH.get(seg);
    }
    public static void ra_offset$set( MemorySegment seg, long x) {
        radvisory.ra_offset$VH.set(seg, x);
    }
    public static long ra_offset$get(MemorySegment seg, long index) {
        return (long)radvisory.ra_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ra_offset$set(MemorySegment seg, long index, long x) {
        radvisory.ra_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ra_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ra_count"));
    public static VarHandle ra_count$VH() {
        return radvisory.ra_count$VH;
    }
    public static int ra_count$get(MemorySegment seg) {
        return (int)radvisory.ra_count$VH.get(seg);
    }
    public static void ra_count$set( MemorySegment seg, int x) {
        radvisory.ra_count$VH.set(seg, x);
    }
    public static int ra_count$get(MemorySegment seg, long index) {
        return (int)radvisory.ra_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ra_count$set(MemorySegment seg, long index, int x) {
        radvisory.ra_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


