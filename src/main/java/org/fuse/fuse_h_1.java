// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class fuse_h_1 {

    public static int VQ_SYNCEVENT() {
        return (int)1024L;
    }
    public static int VQ_SERVEREVENT() {
        return (int)2048L;
    }
    public static int VQ_QUOTA() {
        return (int)4096L;
    }
    public static int VQ_NEARLOWDISK() {
        return (int)8192L;
    }
    public static int VQ_DESIRED_DISK() {
        return (int)16384L;
    }
    public static int VQ_FREE_SPACE_CHANGE() {
        return (int)32768L;
    }
    public static int VQ_FLAG10000() {
        return (int)65536L;
    }
    public static int NFSV4_MAX_FH_SIZE() {
        return (int)128L;
    }
    public static int NFSV3_MAX_FH_SIZE() {
        return (int)64L;
    }
    public static int NFSV2_MAX_FH_SIZE() {
        return (int)32L;
    }
    public static MethodHandle fuse_opt_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_parse$MH,"fuse_opt_parse");
    }
    public static int fuse_opt_parse ( Addressable args,  Addressable data,  Addressable opts,  Addressable proc) {
        var mh$ = fuse_opt_parse$MH();
        try {
            return (int)mh$.invokeExact(args, data, opts, proc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_add_opt$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_opt$MH,"fuse_opt_add_opt");
    }
    public static int fuse_opt_add_opt ( Addressable opts,  Addressable opt) {
        var mh$ = fuse_opt_add_opt$MH();
        try {
            return (int)mh$.invokeExact(opts, opt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_add_opt_escaped$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_opt_escaped$MH,"fuse_opt_add_opt_escaped");
    }
    public static int fuse_opt_add_opt_escaped ( Addressable opts,  Addressable opt) {
        var mh$ = fuse_opt_add_opt_escaped$MH();
        try {
            return (int)mh$.invokeExact(opts, opt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_add_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_arg$MH,"fuse_opt_add_arg");
    }
    public static int fuse_opt_add_arg ( Addressable args,  Addressable arg) {
        var mh$ = fuse_opt_add_arg$MH();
        try {
            return (int)mh$.invokeExact(args, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_insert_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fuse_opt_insert_arg$MH,"fuse_opt_insert_arg");
    }
    public static int fuse_opt_insert_arg ( Addressable args,  int pos,  Addressable arg) {
        var mh$ = fuse_opt_insert_arg$MH();
        try {
            return (int)mh$.invokeExact(args, pos, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_free_args$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fuse_opt_free_args$MH,"fuse_opt_free_args");
    }
    public static void fuse_opt_free_args ( Addressable args) {
        var mh$ = fuse_opt_free_args$MH();
        try {
            mh$.invokeExact(args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_match$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fuse_opt_match$MH,"fuse_opt_match");
    }
    public static int fuse_opt_match ( Addressable opts,  Addressable opt) {
        var mh$ = fuse_opt_match$MH();
        try {
            return (int)mh$.invokeExact(opts, opt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_fast16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __darwin_va_list = Constants$root.C_POINTER$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle _OSSwapInt16$MH() {
        return RuntimeHelper.requireNonNull(constants$1._OSSwapInt16$MH,"_OSSwapInt16");
    }
    public static short _OSSwapInt16 ( short _data) {
        var mh$ = _OSSwapInt16$MH();
        try {
            return (short)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt32$MH() {
        return RuntimeHelper.requireNonNull(constants$1._OSSwapInt32$MH,"_OSSwapInt32");
    }
    public static int _OSSwapInt32 ( int _data) {
        var mh$ = _OSSwapInt32$MH();
        try {
            return (int)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt64$MH() {
        return RuntimeHelper.requireNonNull(constants$1._OSSwapInt64$MH,"_OSSwapInt64");
    }
    public static long _OSSwapInt64 ( long _data) {
        var mh$ = _OSSwapInt64$MH();
        try {
            return (long)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OSReadSwapInt16$MH() {
        return RuntimeHelper.requireNonNull(constants$2.OSReadSwapInt16$MH,"OSReadSwapInt16");
    }
    public static short OSReadSwapInt16 ( Addressable _base,  long _offset) {
        var mh$ = OSReadSwapInt16$MH();
        try {
            return (short)mh$.invokeExact(_base, _offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OSReadSwapInt32$MH() {
        return RuntimeHelper.requireNonNull(constants$2.OSReadSwapInt32$MH,"OSReadSwapInt32");
    }
    public static int OSReadSwapInt32 ( Addressable _base,  long _offset) {
        var mh$ = OSReadSwapInt32$MH();
        try {
            return (int)mh$.invokeExact(_base, _offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OSReadSwapInt64$MH() {
        return RuntimeHelper.requireNonNull(constants$2.OSReadSwapInt64$MH,"OSReadSwapInt64");
    }
    public static long OSReadSwapInt64 ( Addressable _base,  long _offset) {
        var mh$ = OSReadSwapInt64$MH();
        try {
            return (long)mh$.invokeExact(_base, _offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OSWriteSwapInt16$MH() {
        return RuntimeHelper.requireNonNull(constants$2.OSWriteSwapInt16$MH,"OSWriteSwapInt16");
    }
    public static void OSWriteSwapInt16 ( Addressable _base,  long _offset,  short _data) {
        var mh$ = OSWriteSwapInt16$MH();
        try {
            mh$.invokeExact(_base, _offset, _data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OSWriteSwapInt32$MH() {
        return RuntimeHelper.requireNonNull(constants$2.OSWriteSwapInt32$MH,"OSWriteSwapInt32");
    }
    public static void OSWriteSwapInt32 ( Addressable _base,  long _offset,  int _data) {
        var mh$ = OSWriteSwapInt32$MH();
        try {
            mh$.invokeExact(_base, _offset, _data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OSWriteSwapInt64$MH() {
        return RuntimeHelper.requireNonNull(constants$2.OSWriteSwapInt64$MH,"OSWriteSwapInt64");
    }
    public static void OSWriteSwapInt64 ( Addressable _base,  long _offset,  long _data) {
        var mh$ = OSWriteSwapInt64$MH();
        try {
            mh$.invokeExact(_base, _offset, _data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress qaddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt segsz_t = Constants$root.C_INT$LAYOUT;
    public static OfInt swblk_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfInt errno_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle __darwin_check_fd_set_overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__darwin_check_fd_set_overflow$MH,"__darwin_check_fd_set_overflow");
    }
    public static int __darwin_check_fd_set_overflow ( int x0,  Addressable x1,  int x2) {
        var mh$ = __darwin_check_fd_set_overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_check_fd_set$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__darwin_check_fd_set$MH,"__darwin_check_fd_set");
    }
    public static int __darwin_check_fd_set ( int _a,  Addressable _b) {
        var mh$ = __darwin_check_fd_set$MH();
        try {
            return (int)mh$.invokeExact(_a, _b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_isset$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__darwin_fd_isset$MH,"__darwin_fd_isset");
    }
    public static int __darwin_fd_isset ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_isset$MH();
        try {
            return (int)mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_set$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__darwin_fd_set$MH,"__darwin_fd_set");
    }
    public static void __darwin_fd_set ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_set$MH();
        try {
            mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_clr$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__darwin_fd_clr$MH,"__darwin_fd_clr");
    }
    public static void __darwin_fd_clr ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_clr$MH();
        try {
            mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt fd_mask = Constants$root.C_INT$LAYOUT;
    public static OfAddress pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$3.chmod$MH,"chmod");
    }
    public static int chmod ( Addressable x0,  short x1) {
        var mh$ = chmod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fchmod$MH,"fchmod");
    }
    public static int fchmod ( int x0,  short x1) {
        var mh$ = fchmod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fstat$MH,"fstat");
    }
    public static int fstat ( int x0,  Addressable x1) {
        var mh$ = fstat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lstat$MH,"lstat");
    }
    public static int lstat ( Addressable x0,  Addressable x1) {
        var mh$ = lstat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mkdir$MH,"mkdir");
    }
    public static int mkdir ( Addressable x0,  short x1) {
        var mh$ = mkdir$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifo$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mkfifo$MH,"mkfifo");
    }
    public static int mkfifo ( Addressable x0,  short x1) {
        var mh$ = mkfifo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.stat$MH,"stat");
    }
    public static int stat ( Addressable x0,  Addressable x1) {
        var mh$ = stat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mknod$MH,"mknod");
    }
    public static int mknod ( Addressable x0,  short x1,  int x2) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umask$MH() {
        return RuntimeHelper.requireNonNull(constants$5.umask$MH,"umask");
    }
    public static short umask ( short x0) {
        var mh$ = umask$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodat$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fchmodat$MH,"fchmodat");
    }
    public static int fchmodat ( int x0,  Addressable x1,  short x2,  int x3) {
        var mh$ = fchmodat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fstatat$MH,"fstatat");
    }
    public static int fstatat ( int x0,  Addressable x1,  Addressable x2,  int x3) {
        var mh$ = fstatat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mkdirat$MH,"mkdirat");
    }
    public static int mkdirat ( int x0,  Addressable x1,  short x2) {
        var mh$ = mkdirat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimens$MH() {
        return RuntimeHelper.requireNonNull(constants$5.futimens$MH,"futimens");
    }
    public static int futimens ( int __fd,  Addressable __times) {
        var mh$ = futimens$MH();
        try {
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimensat$MH() {
        return RuntimeHelper.requireNonNull(constants$6.utimensat$MH,"utimensat");
    }
    public static int utimensat ( int __fd,  Addressable __path,  Addressable __times,  int __flag) {
        var mh$ = utimensat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __times, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress filesec_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle chflags$MH() {
        return RuntimeHelper.requireNonNull(constants$6.chflags$MH,"chflags");
    }
    public static int chflags ( Addressable x0,  int x1) {
        var mh$ = chflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chmodx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$6.chmodx_np$MH,"chmodx_np");
    }
    public static int chmodx_np ( Addressable x0,  Addressable x1) {
        var mh$ = chmodx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchflags$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fchflags$MH,"fchflags");
    }
    public static int fchflags ( int x0,  int x1) {
        var mh$ = fchflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fchmodx_np$MH,"fchmodx_np");
    }
    public static int fchmodx_np ( int x0,  Addressable x1) {
        var mh$ = fchmodx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fstatx_np$MH,"fstatx_np");
    }
    public static int fstatx_np ( int x0,  Addressable x1,  Addressable x2) {
        var mh$ = fstatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchflags$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lchflags$MH,"lchflags");
    }
    public static int lchflags ( Addressable x0,  int x1) {
        var mh$ = lchflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lchmod$MH,"lchmod");
    }
    public static int lchmod ( Addressable x0,  short x1) {
        var mh$ = lchmod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lstatx_np$MH,"lstatx_np");
    }
    public static int lstatx_np ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = lstatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mkdirx_np$MH,"mkdirx_np");
    }
    public static int mkdirx_np ( Addressable x0,  Addressable x1) {
        var mh$ = mkdirx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifox_np$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mkfifox_np$MH,"mkfifox_np");
    }
    public static int mkfifox_np ( Addressable x0,  Addressable x1) {
        var mh$ = mkfifox_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle statx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$7.statx_np$MH,"statx_np");
    }
    public static int statx_np ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = statx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umaskx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$8.umaskx_np$MH,"umaskx_np");
    }
    public static int umaskx_np ( Addressable x0) {
        var mh$ = umaskx_np$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_mount$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fuse_mount$MH,"fuse_mount");
    }
    public static MemoryAddress fuse_mount ( Addressable mountpoint,  Addressable args) {
        var mh$ = fuse_mount$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mountpoint, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_unmount$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fuse_unmount$MH,"fuse_unmount");
    }
    public static void fuse_unmount ( Addressable mountpoint,  Addressable ch) {
        var mh$ = fuse_unmount$MH();
        try {
            mh$.invokeExact(mountpoint, ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_parse_cmdline$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fuse_parse_cmdline$MH,"fuse_parse_cmdline");
    }
    public static int fuse_parse_cmdline ( Addressable args,  Addressable mountpoint,  Addressable multithreaded,  Addressable foreground) {
        var mh$ = fuse_parse_cmdline$MH();
        try {
            return (int)mh$.invokeExact(args, mountpoint, multithreaded, foreground);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_daemonize$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fuse_daemonize$MH,"fuse_daemonize");
    }
    public static int fuse_daemonize ( int foreground) {
        var mh$ = fuse_daemonize$MH();
        try {
            return (int)mh$.invokeExact(foreground);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_version$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fuse_version$MH,"fuse_version");
    }
    public static int fuse_version () {
        var mh$ = fuse_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_pollhandle_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fuse_pollhandle_destroy$MH,"fuse_pollhandle_destroy");
    }
    public static void fuse_pollhandle_destroy ( Addressable ph) {
        var mh$ = fuse_pollhandle_destroy$MH();
        try {
            mh$.invokeExact(ph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FUSE_BUF_IS_FD() {
        return (int)2L;
    }
    public static int FUSE_BUF_FD_SEEK() {
        return (int)4L;
    }
    public static int FUSE_BUF_FD_RETRY() {
        return (int)8L;
    }
    public static int FUSE_BUF_NO_SPLICE() {
        return (int)2L;
    }
    public static int FUSE_BUF_FORCE_SPLICE() {
        return (int)4L;
    }
    public static int FUSE_BUF_SPLICE_MOVE() {
        return (int)8L;
    }
    public static int FUSE_BUF_SPLICE_NONBLOCK() {
        return (int)16L;
    }
    public static MethodHandle fuse_buf_size$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fuse_buf_size$MH,"fuse_buf_size");
    }
    public static long fuse_buf_size ( Addressable bufv) {
        var mh$ = fuse_buf_size$MH();
        try {
            return (long)mh$.invokeExact(bufv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_buf_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fuse_buf_copy$MH,"fuse_buf_copy");
    }
    public static long fuse_buf_copy ( Addressable dst,  Addressable src,  int flags) {
        var mh$ = fuse_buf_copy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_set_signal_handlers$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fuse_set_signal_handlers$MH,"fuse_set_signal_handlers");
    }
    public static int fuse_set_signal_handlers ( Addressable se) {
        var mh$ = fuse_set_signal_handlers$MH();
        try {
            return (int)mh$.invokeExact(se);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_remove_signal_handlers$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fuse_remove_signal_handlers$MH,"fuse_remove_signal_handlers");
    }
    public static void fuse_remove_signal_handlers ( Addressable se) {
        var mh$ = fuse_remove_signal_handlers$MH();
        try {
            mh$.invokeExact(se);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FILESEC_OWNER() {
        return (int)1L;
    }
    public static int FILESEC_GROUP() {
        return (int)2L;
    }
    public static int FILESEC_UUID() {
        return (int)3L;
    }
    public static int FILESEC_MODE() {
        return (int)4L;
    }
    public static int FILESEC_ACL() {
        return (int)5L;
    }
    public static int FILESEC_GRPUUID() {
        return (int)6L;
    }
    public static int FILESEC_ACL_RAW() {
        return (int)100L;
    }
    public static int FILESEC_ACL_ALLOCSIZE() {
        return (int)101L;
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$9.open$MH,"open");
    }
    public static int open ( Addressable x0,  int x1, Object... x2) {
        var mh$ = open$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat$MH() {
        return RuntimeHelper.requireNonNull(constants$10.openat$MH,"openat");
    }
    public static int openat ( int x0,  Addressable x1,  int x2, Object... x3) {
        var mh$ = openat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat$MH() {
        return RuntimeHelper.requireNonNull(constants$10.creat$MH,"creat");
    }
    public static int creat ( Addressable x0,  short x1) {
        var mh$ = creat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fcntl$MH,"fcntl");
    }
    public static int fcntl ( int x0,  int x1, Object... x2) {
        var mh$ = fcntl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$10.openx_np$MH,"openx_np");
    }
    public static int openx_np ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = openx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_dprotected_np$MH() {
        return RuntimeHelper.requireNonNull(constants$10.open_dprotected_np$MH,"open_dprotected_np");
    }
    public static int open_dprotected_np ( Addressable x0,  int x1,  int x2,  int x3, Object... x4) {
        var mh$ = open_dprotected_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flock$MH() {
        return RuntimeHelper.requireNonNull(constants$10.flock$MH,"flock");
    }
    public static int flock ( int x0,  int x1) {
        var mh$ = flock$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filesec_init$MH() {
        return RuntimeHelper.requireNonNull(constants$11.filesec_init$MH,"filesec_init");
    }
    public static MemoryAddress filesec_init () {
        var mh$ = filesec_init$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filesec_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$11.filesec_dup$MH,"filesec_dup");
    }
    public static MemoryAddress filesec_dup ( Addressable x0) {
        var mh$ = filesec_dup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filesec_free$MH() {
        return RuntimeHelper.requireNonNull(constants$11.filesec_free$MH,"filesec_free");
    }
    public static void filesec_free ( Addressable x0) {
        var mh$ = filesec_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filesec_get_property$MH() {
        return RuntimeHelper.requireNonNull(constants$11.filesec_get_property$MH,"filesec_get_property");
    }
    public static int filesec_get_property ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = filesec_get_property$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filesec_query_property$MH() {
        return RuntimeHelper.requireNonNull(constants$11.filesec_query_property$MH,"filesec_query_property");
    }
    public static int filesec_query_property ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = filesec_query_property$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filesec_set_property$MH() {
        return RuntimeHelper.requireNonNull(constants$11.filesec_set_property$MH,"filesec_set_property");
    }
    public static int filesec_set_property ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = filesec_set_property$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filesec_unset_property$MH() {
        return RuntimeHelper.requireNonNull(constants$12.filesec_unset_property$MH,"filesec_unset_property");
    }
    public static int filesec_unset_property ( Addressable x0,  int x1) {
        var mh$ = filesec_unset_property$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt __darwin_nl_item = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wctrans_t = Constants$root.C_INT$LAYOUT;
    public static MemoryLayout getdate_err$LAYOUT() {
        return constants$12.getdate_err$LAYOUT;
    }
    public static VarHandle getdate_err$VH() {
        return constants$12.getdate_err$VH;
    }
    public static MemorySegment getdate_err$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12.getdate_err$SEGMENT,"getdate_err");
    }
    public static int getdate_err$get() {
        return (int) constants$12.getdate_err$VH.get(RuntimeHelper.requireNonNull(constants$12.getdate_err$SEGMENT, "getdate_err"));
    }
    public static void getdate_err$set( int x) {
        constants$12.getdate_err$VH.set(RuntimeHelper.requireNonNull(constants$12.getdate_err$SEGMENT, "getdate_err"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$12.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$12.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$12.timezone$VH.get(RuntimeHelper.requireNonNull(constants$12.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$12.timezone$VH.set(RuntimeHelper.requireNonNull(constants$12.timezone$SEGMENT, "timezone"), x);
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$12.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$12.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$12.daylight$VH.get(RuntimeHelper.requireNonNull(constants$12.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$12.daylight$VH.set(RuntimeHelper.requireNonNull(constants$12.daylight$SEGMENT, "daylight"), x);
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$12.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable x0) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$13.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable x0) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$13.difftime$MH,"difftime");
    }
    public static double difftime ( long x0,  long x1) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdate$MH() {
        return RuntimeHelper.requireNonNull(constants$13.getdate$MH,"getdate");
    }
    public static MemoryAddress getdate ( Addressable x0) {
        var mh$ = getdate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$13.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable x0) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$13.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable x0) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable x0) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strptime$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strptime$MH,"strptime");
    }
    public static MemoryAddress strptime ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = strptime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$14.time$MH,"time");
    }
    public static long time ( Addressable x0) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$14.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$14.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable x0,  Addressable x1) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable x0,  Addressable x1) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable x0,  Addressable x1) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable x0,  Addressable x1) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix2time$MH() {
        return RuntimeHelper.requireNonNull(constants$15.posix2time$MH,"posix2time");
    }
    public static long posix2time ( long x0) {
        var mh$ = posix2time$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tzsetwall$MH() {
        return RuntimeHelper.requireNonNull(constants$15.tzsetwall$MH,"tzsetwall");
    }
    public static void tzsetwall () {
        var mh$ = tzsetwall$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time2posix$MH() {
        return RuntimeHelper.requireNonNull(constants$15.time2posix$MH,"time2posix");
    }
    public static long time2posix ( long x0) {
        var mh$ = time2posix$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$16.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable x0) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$16.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable x0) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$16.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __rqtp,  Addressable __rmtp) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__rqtp, __rmtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int _CLOCK_MONOTONIC() {
        return (int)6L;
    }
    public static int _CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int _CLOCK_MONOTONIC_RAW_APPROX() {
        return (int)5L;
    }
    public static int _CLOCK_UPTIME_RAW() {
        return (int)8L;
    }
    public static int _CLOCK_UPTIME_RAW_APPROX() {
        return (int)9L;
    }
    public static int _CLOCK_PROCESS_CPUTIME_ID() {
        return (int)12L;
    }
    public static int _CLOCK_THREAD_CPUTIME_ID() {
        return (int)16L;
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$16.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$16.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime_nsec_np$MH() {
        return RuntimeHelper.requireNonNull(constants$16.clock_gettime_nsec_np$MH,"clock_gettime_nsec_np");
    }
    public static long clock_gettime_nsec_np ( int __clock_id) {
        var mh$ = clock_gettime_nsec_np$MH();
        try {
            return (long)mh$.invokeExact(__clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$17.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$17.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable ts,  int base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(ts, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utime$MH() {
        return RuntimeHelper.requireNonNull(constants$17.utime$MH,"utime");
    }
    public static int utime ( Addressable x0,  Addressable x1) {
        var mh$ = utime$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatvfs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fstatvfs$MH,"fstatvfs");
    }
    public static int fstatvfs ( int x0,  Addressable x1) {
        var mh$ = fstatvfs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle statvfs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.statvfs$MH,"statvfs");
    }
    public static int statvfs ( Addressable x0,  Addressable x1) {
        var mh$ = statvfs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int UIO_READ() {
        return (int)0L;
    }
    public static int UIO_WRITE() {
        return (int)1L;
    }
    public static MethodHandle readv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.readv$MH,"readv");
    }
    public static long readv ( int x0,  Addressable x1,  int x2) {
        var mh$ = readv$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle writev$MH() {
        return RuntimeHelper.requireNonNull(constants$18.writev$MH,"writev");
    }
    public static long writev ( int x0,  Addressable x1,  int x2) {
        var mh$ = writev$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv$MH() {
        return RuntimeHelper.requireNonNull(constants$18.preadv$MH,"preadv");
    }
    public static long preadv ( int x0,  Addressable x1,  int x2,  long x3) {
        var mh$ = preadv$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev$MH() {
        return RuntimeHelper.requireNonNull(constants$18.pwritev$MH,"pwritev");
    }
    public static long pwritev ( int x0,  Addressable x1,  int x2,  long x3) {
        var mh$ = pwritev$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress mcontext_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle signal$MH() {
        return RuntimeHelper.requireNonNull(constants$19.signal$MH,"signal");
    }
    public static MemoryAddress signal ( int x0,  Addressable x1) {
        var mh$ = signal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt au_asid_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle audit$MH() {
        return RuntimeHelper.requireNonNull(constants$19.audit$MH,"audit");
    }
    public static int audit ( Addressable x0,  int x1) {
        var mh$ = audit$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle auditon$MH() {
        return RuntimeHelper.requireNonNull(constants$19.auditon$MH,"auditon");
    }
    public static int auditon ( int x0,  Addressable x1,  int x2) {
        var mh$ = auditon$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle auditctl$MH() {
        return RuntimeHelper.requireNonNull(constants$19.auditctl$MH,"auditctl");
    }
    public static int auditctl ( Addressable x0) {
        var mh$ = auditctl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getauid$MH() {
        return RuntimeHelper.requireNonNull(constants$19.getauid$MH,"getauid");
    }
    public static int getauid ( Addressable x0) {
        var mh$ = getauid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setauid$MH() {
        return RuntimeHelper.requireNonNull(constants$20.setauid$MH,"setauid");
    }
    public static int setauid ( Addressable x0) {
        var mh$ = setauid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getaudit_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$20.getaudit_addr$MH,"getaudit_addr");
    }
    public static int getaudit_addr ( Addressable x0,  int x1) {
        var mh$ = getaudit_addr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setaudit_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$20.setaudit_addr$MH,"setaudit_addr");
    }
    public static int setaudit_addr ( Addressable x0,  int x1) {
        var mh$ = setaudit_addr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getaudit$MH() {
        return RuntimeHelper.requireNonNull(constants$20.getaudit$MH,"getaudit");
    }
    public static int getaudit ( Addressable x0) {
        var mh$ = getaudit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setaudit$MH() {
        return RuntimeHelper.requireNonNull(constants$20.setaudit$MH,"setaudit");
    }
    public static int setaudit ( Addressable x0) {
        var mh$ = setaudit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt boolean_t = Constants$root.C_INT$LAYOUT;
    public static OfInt integer_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress mach_port_name_array_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress mach_port_array_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress mach_port_type_array_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt mach_port_delta_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress mach_port_info_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt mach_port_flavor_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress mach_service_port_info_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress mach_port_options_ptr_t = Constants$root.C_POINTER$LAYOUT;
    public static int kGUARD_EXC_DESTROY() {
        return (int)1L;
    }
    public static int kGUARD_EXC_MOD_REFS() {
        return (int)2L;
    }
    public static int kGUARD_EXC_SET_CONTEXT() {
        return (int)4L;
    }
    public static int kGUARD_EXC_UNGUARDED() {
        return (int)8L;
    }
    public static int kGUARD_EXC_INCORRECT_GUARD() {
        return (int)16L;
    }
    public static int kGUARD_EXC_IMMOVABLE() {
        return (int)32L;
    }
    public static int kGUARD_EXC_STRICT_REPLY() {
        return (int)64L;
    }
    public static int kGUARD_EXC_MSG_FILTERED() {
        return (int)128L;
    }
    public static int kGUARD_EXC_INVALID_RIGHT() {
        return (int)256L;
    }
    public static int kGUARD_EXC_INVALID_NAME() {
        return (int)512L;
    }
    public static int kGUARD_EXC_INVALID_VALUE() {
        return (int)1024L;
    }
    public static int kGUARD_EXC_INVALID_ARGUMENT() {
        return (int)2048L;
    }
    public static int kGUARD_EXC_RIGHT_EXISTS() {
        return (int)4096L;
    }
    public static int kGUARD_EXC_KERN_NO_SPACE() {
        return (int)8192L;
    }
    public static int kGUARD_EXC_KERN_FAILURE() {
        return (int)16384L;
    }
    public static int kGUARD_EXC_KERN_RESOURCE() {
        return (int)32768L;
    }
    public static int kGUARD_EXC_SEND_INVALID_REPLY() {
        return (int)65536L;
    }
    public static int kGUARD_EXC_SEND_INVALID_VOUCHER() {
        return (int)131072L;
    }
    public static int kGUARD_EXC_SEND_INVALID_RIGHT() {
        return (int)262144L;
    }
    public static int kGUARD_EXC_RCV_INVALID_NAME() {
        return (int)524288L;
    }
    public static int kGUARD_EXC_RCV_GUARDED_DESC() {
        return (int)1048576L;
    }
    public static int kGUARD_EXC_MOD_REFS_NON_FATAL() {
        return (int)2097152L;
    }
    public static int kGUARD_EXC_IMMOVABLE_NON_FATAL() {
        return (int)4194304L;
    }
    public static MethodHandle audit_session_self$MH() {
        return RuntimeHelper.requireNonNull(constants$20.audit_session_self$MH,"audit_session_self");
    }
    public static int audit_session_self () {
        var mh$ = audit_session_self$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle audit_session_join$MH() {
        return RuntimeHelper.requireNonNull(constants$21.audit_session_join$MH,"audit_session_join");
    }
    public static int audit_session_join ( int port) {
        var mh$ = audit_session_join$MH();
        try {
            return (int)mh$.invokeExact(port);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle audit_session_port$MH() {
        return RuntimeHelper.requireNonNull(constants$21.audit_session_port$MH,"audit_session_port");
    }
    public static int audit_session_port ( int asid,  Addressable portname) {
        var mh$ = audit_session_port$MH();
        try {
            return (int)mh$.invokeExact(asid, portname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress kauth_cred_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress posix_cred_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$21.adjtime$MH,"adjtime");
    }
    public static int adjtime ( Addressable x0,  Addressable x1) {
        var mh$ = adjtime$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimes$MH() {
        return RuntimeHelper.requireNonNull(constants$21.futimes$MH,"futimes");
    }
    public static int futimes ( int x0,  Addressable x1) {
        var mh$ = futimes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lutimes$MH() {
        return RuntimeHelper.requireNonNull(constants$21.lutimes$MH,"lutimes");
    }
    public static int lutimes ( Addressable x0,  Addressable x1) {
        var mh$ = lutimes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle settimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$21.settimeofday$MH,"settimeofday");
    }
    public static int settimeofday ( Addressable x0,  Addressable x1) {
        var mh$ = settimeofday$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$22.getitimer$MH,"getitimer");
    }
    public static int getitimer ( int x0,  Addressable x1) {
        var mh$ = getitimer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$22.gettimeofday$MH,"gettimeofday");
    }
    public static int gettimeofday ( Addressable x0,  Addressable x1) {
        var mh$ = gettimeofday$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$22.select$MH,"select");
    }
    public static int select ( int x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$22.setitimer$MH,"setitimer");
    }
    public static int setitimer ( int x0,  Addressable x1,  Addressable x2) {
        var mh$ = setitimer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimes$MH() {
        return RuntimeHelper.requireNonNull(constants$22.utimes$MH,"utimes");
    }
    public static int utimes ( Addressable x0,  Addressable x1) {
        var mh$ = utimes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress mount_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress vnode_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle fhopen$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fhopen$MH,"fhopen");
    }
    public static int fhopen ( Addressable x0,  int x1) {
        var mh$ = fhopen$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatfs$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fstatfs$MH,"fstatfs");
    }
    public static int fstatfs ( int x0,  Addressable x1) {
        var mh$ = fstatfs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getfh$MH() {
        return RuntimeHelper.requireNonNull(constants$23.getfh$MH,"getfh");
    }
    public static int getfh ( Addressable x0,  Addressable x1) {
        var mh$ = getfh$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getfsstat$MH() {
        return RuntimeHelper.requireNonNull(constants$24.getfsstat$MH,"getfsstat");
    }
    public static int getfsstat ( Addressable x0,  int x1,  int x2) {
        var mh$ = getfsstat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmntinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$24.getmntinfo$MH,"getmntinfo");
    }
    public static int getmntinfo ( Addressable x0,  int x1) {
        var mh$ = getmntinfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmntinfo_r_np$MH() {
        return RuntimeHelper.requireNonNull(constants$24.getmntinfo_r_np$MH,"getmntinfo_r_np");
    }
    public static int getmntinfo_r_np ( Addressable x0,  int x1) {
        var mh$ = getmntinfo_r_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mount$MH() {
        return RuntimeHelper.requireNonNull(constants$24.mount$MH,"mount");
    }
    public static int mount ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = mount$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmount$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fmount$MH,"fmount");
    }
    public static int fmount ( Addressable x0,  int x1,  int x2,  Addressable x3) {
        var mh$ = fmount$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle statfs$MH() {
        return RuntimeHelper.requireNonNull(constants$24.statfs$MH,"statfs");
    }
    public static int statfs ( Addressable x0,  Addressable x1) {
        var mh$ = statfs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unmount$MH() {
        return RuntimeHelper.requireNonNull(constants$25.unmount$MH,"unmount");
    }
    public static int unmount ( Addressable x0,  int x1) {
        var mh$ = unmount$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getvfsbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$25.getvfsbyname$MH,"getvfsbyname");
    }
    public static int getvfsbyname ( Addressable x0,  Addressable x1) {
        var mh$ = getvfsbyname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress fuse_dirh_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle fuse_new$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_new$MH,"fuse_new");
    }
    public static MemoryAddress fuse_new ( Addressable ch,  Addressable args,  Addressable op,  long op_size,  Addressable user_data) {
        var mh$ = fuse_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ch, args, op, op_size, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_destroy$MH,"fuse_destroy");
    }
    public static void fuse_destroy ( Addressable f) {
        var mh$ = fuse_destroy$MH();
        try {
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_loop$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_loop$MH,"fuse_loop");
    }
    public static int fuse_loop ( Addressable f) {
        var mh$ = fuse_loop$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_exit$MH,"fuse_exit");
    }
    public static void fuse_exit ( Addressable f) {
        var mh$ = fuse_exit$MH();
        try {
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_loop_mt$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_loop_mt$MH,"fuse_loop_mt");
    }
    public static int fuse_loop_mt ( Addressable f) {
        var mh$ = fuse_loop_mt$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_get_context$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_get_context$MH,"fuse_get_context");
    }
    public static MemoryAddress fuse_get_context () {
        var mh$ = fuse_get_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fuse_getgroups$MH,"fuse_getgroups");
    }
    public static int fuse_getgroups ( int size,  Addressable list) {
        var mh$ = fuse_getgroups$MH();
        try {
            return (int)mh$.invokeExact(size, list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_interrupted$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fuse_interrupted$MH,"fuse_interrupted");
    }
    public static int fuse_interrupted () {
        var mh$ = fuse_interrupted$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_invalidate_path$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fuse_invalidate_path$MH,"fuse_invalidate_path");
    }
    public static int fuse_invalidate_path ( Addressable f,  Addressable path) {
        var mh$ = fuse_invalidate_path$MH();
        try {
            return (int)mh$.invokeExact(f, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_invalidate$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fuse_invalidate$MH,"fuse_invalidate");
    }
    public static int fuse_invalidate ( Addressable f,  Addressable path) {
        var mh$ = fuse_invalidate$MH();
        try {
            return (int)mh$.invokeExact(f, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_is_lib_option$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fuse_is_lib_option$MH,"fuse_is_lib_option");
    }
    public static int fuse_is_lib_option ( Addressable opt) {
        var mh$ = fuse_is_lib_option$MH();
        try {
            return (int)mh$.invokeExact(opt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_main_real$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fuse_main_real$MH,"fuse_main_real");
    }
    public static int fuse_main_real ( int argc,  Addressable argv,  Addressable op,  long op_size,  Addressable user_data) {
        var mh$ = fuse_main_real$MH();
        try {
            return (int)mh$.invokeExact(argc, argv, op, op_size, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_start_cleanup_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fuse_start_cleanup_thread$MH,"fuse_start_cleanup_thread");
    }
    public static int fuse_start_cleanup_thread ( Addressable fuse) {
        var mh$ = fuse_start_cleanup_thread$MH();
        try {
            return (int)mh$.invokeExact(fuse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_stop_cleanup_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fuse_stop_cleanup_thread$MH,"fuse_stop_cleanup_thread");
    }
    public static void fuse_stop_cleanup_thread ( Addressable fuse) {
        var mh$ = fuse_stop_cleanup_thread$MH();
        try {
            mh$.invokeExact(fuse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_clean_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fuse_clean_cache$MH,"fuse_clean_cache");
    }
    public static int fuse_clean_cache ( Addressable fuse) {
        var mh$ = fuse_clean_cache$MH();
        try {
            return (int)mh$.invokeExact(fuse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_setattr_x$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fuse_fs_setattr_x$MH,"fuse_fs_setattr_x");
    }
    public static int fuse_fs_setattr_x ( Addressable fs,  Addressable path,  Addressable attr) {
        var mh$ = fuse_fs_setattr_x$MH();
        try {
            return (int)mh$.invokeExact(fs, path, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fsetattr_x$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fuse_fs_fsetattr_x$MH,"fuse_fs_fsetattr_x");
    }
    public static int fuse_fs_fsetattr_x ( Addressable fs,  Addressable path,  Addressable attr,  Addressable fi) {
        var mh$ = fuse_fs_fsetattr_x$MH();
        try {
            return (int)mh$.invokeExact(fs, path, attr, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_getattr$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fuse_fs_getattr$MH,"fuse_fs_getattr");
    }
    public static int fuse_fs_getattr ( Addressable fs,  Addressable path,  Addressable buf) {
        var mh$ = fuse_fs_getattr$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fuse_fs_fgetattr$MH,"fuse_fs_fgetattr");
    }
    public static int fuse_fs_fgetattr ( Addressable fs,  Addressable path,  Addressable buf,  Addressable fi) {
        var mh$ = fuse_fs_fgetattr$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_rename$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fuse_fs_rename$MH,"fuse_fs_rename");
    }
    public static int fuse_fs_rename ( Addressable fs,  Addressable oldpath,  Addressable newpath) {
        var mh$ = fuse_fs_rename$MH();
        try {
            return (int)mh$.invokeExact(fs, oldpath, newpath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_renamex$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fuse_fs_renamex$MH,"fuse_fs_renamex");
    }
    public static int fuse_fs_renamex ( Addressable fs,  Addressable oldpath,  Addressable newpath,  int flags) {
        var mh$ = fuse_fs_renamex$MH();
        try {
            return (int)mh$.invokeExact(fs, oldpath, newpath, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_setvolname$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fuse_fs_setvolname$MH,"fuse_fs_setvolname");
    }
    public static int fuse_fs_setvolname ( Addressable fs,  Addressable volname) {
        var mh$ = fuse_fs_setvolname$MH();
        try {
            return (int)mh$.invokeExact(fs, volname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fuse_fs_exchange$MH,"fuse_fs_exchange");
    }
    public static int fuse_fs_exchange ( Addressable fs,  Addressable oldpath,  Addressable newpath,  long flags) {
        var mh$ = fuse_fs_exchange$MH();
        try {
            return (int)mh$.invokeExact(fs, oldpath, newpath, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fuse_fs_unlink$MH,"fuse_fs_unlink");
    }
    public static int fuse_fs_unlink ( Addressable fs,  Addressable path) {
        var mh$ = fuse_fs_unlink$MH();
        try {
            return (int)mh$.invokeExact(fs, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fuse_fs_rmdir$MH,"fuse_fs_rmdir");
    }
    public static int fuse_fs_rmdir ( Addressable fs,  Addressable path) {
        var mh$ = fuse_fs_rmdir$MH();
        try {
            return (int)mh$.invokeExact(fs, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fuse_fs_symlink$MH,"fuse_fs_symlink");
    }
    public static int fuse_fs_symlink ( Addressable fs,  Addressable linkname,  Addressable path) {
        var mh$ = fuse_fs_symlink$MH();
        try {
            return (int)mh$.invokeExact(fs, linkname, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_link$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fuse_fs_link$MH,"fuse_fs_link");
    }
    public static int fuse_fs_link ( Addressable fs,  Addressable oldpath,  Addressable newpath) {
        var mh$ = fuse_fs_link$MH();
        try {
            return (int)mh$.invokeExact(fs, oldpath, newpath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_release$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fuse_fs_release$MH,"fuse_fs_release");
    }
    public static int fuse_fs_release ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = fuse_fs_release$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_open$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fuse_fs_open$MH,"fuse_fs_open");
    }
    public static int fuse_fs_open ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = fuse_fs_open$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_read$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fuse_fs_read$MH,"fuse_fs_read");
    }
    public static int fuse_fs_read ( Addressable fs,  Addressable path,  Addressable buf,  long size,  long off,  Addressable fi) {
        var mh$ = fuse_fs_read$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf, size, off, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_read_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fuse_fs_read_buf$MH,"fuse_fs_read_buf");
    }
    public static int fuse_fs_read_buf ( Addressable fs,  Addressable path,  Addressable bufp,  long size,  long off,  Addressable fi) {
        var mh$ = fuse_fs_read_buf$MH();
        try {
            return (int)mh$.invokeExact(fs, path, bufp, size, off, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_write$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fuse_fs_write$MH,"fuse_fs_write");
    }
    public static int fuse_fs_write ( Addressable fs,  Addressable path,  Addressable buf,  long size,  long off,  Addressable fi) {
        var mh$ = fuse_fs_write$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf, size, off, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_write_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fuse_fs_write_buf$MH,"fuse_fs_write_buf");
    }
    public static int fuse_fs_write_buf ( Addressable fs,  Addressable path,  Addressable buf,  long off,  Addressable fi) {
        var mh$ = fuse_fs_write_buf$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf, off, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fuse_fs_fsync$MH,"fuse_fs_fsync");
    }
    public static int fuse_fs_fsync ( Addressable fs,  Addressable path,  int datasync,  Addressable fi) {
        var mh$ = fuse_fs_fsync$MH();
        try {
            return (int)mh$.invokeExact(fs, path, datasync, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fuse_fs_flush$MH,"fuse_fs_flush");
    }
    public static int fuse_fs_flush ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = fuse_fs_flush$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_statfs$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fuse_fs_statfs$MH,"fuse_fs_statfs");
    }
    public static int fuse_fs_statfs ( Addressable fs,  Addressable path,  Addressable buf) {
        var mh$ = fuse_fs_statfs$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_statfs_x$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fuse_fs_statfs_x$MH,"fuse_fs_statfs_x");
    }
    public static int fuse_fs_statfs_x ( Addressable fs,  Addressable path,  Addressable buf) {
        var mh$ = fuse_fs_statfs_x$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_opendir$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fuse_fs_opendir$MH,"fuse_fs_opendir");
    }
    public static int fuse_fs_opendir ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = fuse_fs_opendir$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_readdir$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fuse_fs_readdir$MH,"fuse_fs_readdir");
    }
    public static int fuse_fs_readdir ( Addressable fs,  Addressable path,  Addressable buf,  Addressable filler,  long off,  Addressable fi) {
        var mh$ = fuse_fs_readdir$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf, filler, off, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fsyncdir$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fuse_fs_fsyncdir$MH,"fuse_fs_fsyncdir");
    }
    public static int fuse_fs_fsyncdir ( Addressable fs,  Addressable path,  int datasync,  Addressable fi) {
        var mh$ = fuse_fs_fsyncdir$MH();
        try {
            return (int)mh$.invokeExact(fs, path, datasync, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_releasedir$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fuse_fs_releasedir$MH,"fuse_fs_releasedir");
    }
    public static int fuse_fs_releasedir ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = fuse_fs_releasedir$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_create$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fuse_fs_create$MH,"fuse_fs_create");
    }
    public static int fuse_fs_create ( Addressable fs,  Addressable path,  short mode,  Addressable fi) {
        var mh$ = fuse_fs_create$MH();
        try {
            return (int)mh$.invokeExact(fs, path, mode, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fuse_fs_lock$MH,"fuse_fs_lock");
    }
    public static int fuse_fs_lock ( Addressable fs,  Addressable path,  Addressable fi,  int cmd,  Addressable lock) {
        var mh$ = fuse_fs_lock$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi, cmd, lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_flock$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fuse_fs_flock$MH,"fuse_fs_flock");
    }
    public static int fuse_fs_flock ( Addressable fs,  Addressable path,  Addressable fi,  int op) {
        var mh$ = fuse_fs_flock$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_chflags$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fuse_fs_chflags$MH,"fuse_fs_chflags");
    }
    public static int fuse_fs_chflags ( Addressable fs,  Addressable path,  int flags) {
        var mh$ = fuse_fs_chflags$MH();
        try {
            return (int)mh$.invokeExact(fs, path, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_getxtimes$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fuse_fs_getxtimes$MH,"fuse_fs_getxtimes");
    }
    public static int fuse_fs_getxtimes ( Addressable fs,  Addressable path,  Addressable bkuptime,  Addressable crtime) {
        var mh$ = fuse_fs_getxtimes$MH();
        try {
            return (int)mh$.invokeExact(fs, path, bkuptime, crtime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_setbkuptime$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fuse_fs_setbkuptime$MH,"fuse_fs_setbkuptime");
    }
    public static int fuse_fs_setbkuptime ( Addressable fs,  Addressable path,  Addressable tv) {
        var mh$ = fuse_fs_setbkuptime$MH();
        try {
            return (int)mh$.invokeExact(fs, path, tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_setchgtime$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fuse_fs_setchgtime$MH,"fuse_fs_setchgtime");
    }
    public static int fuse_fs_setchgtime ( Addressable fs,  Addressable path,  Addressable tv) {
        var mh$ = fuse_fs_setchgtime$MH();
        try {
            return (int)mh$.invokeExact(fs, path, tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_setcrtime$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fuse_fs_setcrtime$MH,"fuse_fs_setcrtime");
    }
    public static int fuse_fs_setcrtime ( Addressable fs,  Addressable path,  Addressable tv) {
        var mh$ = fuse_fs_setcrtime$MH();
        try {
            return (int)mh$.invokeExact(fs, path, tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fuse_fs_chmod$MH,"fuse_fs_chmod");
    }
    public static int fuse_fs_chmod ( Addressable fs,  Addressable path,  short mode) {
        var mh$ = fuse_fs_chmod$MH();
        try {
            return (int)mh$.invokeExact(fs, path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_chown$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fuse_fs_chown$MH,"fuse_fs_chown");
    }
    public static int fuse_fs_chown ( Addressable fs,  Addressable path,  int uid,  int gid) {
        var mh$ = fuse_fs_chown$MH();
        try {
            return (int)mh$.invokeExact(fs, path, uid, gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fuse_fs_truncate$MH,"fuse_fs_truncate");
    }
    public static int fuse_fs_truncate ( Addressable fs,  Addressable path,  long size) {
        var mh$ = fuse_fs_truncate$MH();
        try {
            return (int)mh$.invokeExact(fs, path, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fuse_fs_ftruncate$MH,"fuse_fs_ftruncate");
    }
    public static int fuse_fs_ftruncate ( Addressable fs,  Addressable path,  long size,  Addressable fi) {
        var mh$ = fuse_fs_ftruncate$MH();
        try {
            return (int)mh$.invokeExact(fs, path, size, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_utimens$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fuse_fs_utimens$MH,"fuse_fs_utimens");
    }
    public static int fuse_fs_utimens ( Addressable fs,  Addressable path,  Addressable tv) {
        var mh$ = fuse_fs_utimens$MH();
        try {
            return (int)mh$.invokeExact(fs, path, tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_access$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fuse_fs_access$MH,"fuse_fs_access");
    }
    public static int fuse_fs_access ( Addressable fs,  Addressable path,  int mask) {
        var mh$ = fuse_fs_access$MH();
        try {
            return (int)mh$.invokeExact(fs, path, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fuse_fs_readlink$MH,"fuse_fs_readlink");
    }
    public static int fuse_fs_readlink ( Addressable fs,  Addressable path,  Addressable buf,  long len) {
        var mh$ = fuse_fs_readlink$MH();
        try {
            return (int)mh$.invokeExact(fs, path, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fuse_fs_mknod$MH,"fuse_fs_mknod");
    }
    public static int fuse_fs_mknod ( Addressable fs,  Addressable path,  short mode,  int rdev) {
        var mh$ = fuse_fs_mknod$MH();
        try {
            return (int)mh$.invokeExact(fs, path, mode, rdev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fuse_fs_mkdir$MH,"fuse_fs_mkdir");
    }
    public static int fuse_fs_mkdir ( Addressable fs,  Addressable path,  short mode) {
        var mh$ = fuse_fs_mkdir$MH();
        try {
            return (int)mh$.invokeExact(fs, path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_setxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fuse_fs_setxattr$MH,"fuse_fs_setxattr");
    }
    public static int fuse_fs_setxattr ( Addressable fs,  Addressable path,  Addressable name,  Addressable value,  long size,  int flags,  int position) {
        var mh$ = fuse_fs_setxattr$MH();
        try {
            return (int)mh$.invokeExact(fs, path, name, value, size, flags, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_getxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fuse_fs_getxattr$MH,"fuse_fs_getxattr");
    }
    public static int fuse_fs_getxattr ( Addressable fs,  Addressable path,  Addressable name,  Addressable value,  long size,  int position) {
        var mh$ = fuse_fs_getxattr$MH();
        try {
            return (int)mh$.invokeExact(fs, path, name, value, size, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_listxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fuse_fs_listxattr$MH,"fuse_fs_listxattr");
    }
    public static int fuse_fs_listxattr ( Addressable fs,  Addressable path,  Addressable list,  long size) {
        var mh$ = fuse_fs_listxattr$MH();
        try {
            return (int)mh$.invokeExact(fs, path, list, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_removexattr$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fuse_fs_removexattr$MH,"fuse_fs_removexattr");
    }
    public static int fuse_fs_removexattr ( Addressable fs,  Addressable path,  Addressable name) {
        var mh$ = fuse_fs_removexattr$MH();
        try {
            return (int)mh$.invokeExact(fs, path, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_bmap$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fuse_fs_bmap$MH,"fuse_fs_bmap");
    }
    public static int fuse_fs_bmap ( Addressable fs,  Addressable path,  long blocksize,  Addressable idx) {
        var mh$ = fuse_fs_bmap$MH();
        try {
            return (int)mh$.invokeExact(fs, path, blocksize, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_ioctl$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fuse_fs_ioctl$MH,"fuse_fs_ioctl");
    }
    public static int fuse_fs_ioctl ( Addressable fs,  Addressable path,  int cmd,  Addressable arg,  Addressable fi,  int flags,  Addressable data) {
        var mh$ = fuse_fs_ioctl$MH();
        try {
            return (int)mh$.invokeExact(fs, path, cmd, arg, fi, flags, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fuse_fs_poll$MH,"fuse_fs_poll");
    }
    public static int fuse_fs_poll ( Addressable fs,  Addressable path,  Addressable fi,  Addressable ph,  Addressable reventsp) {
        var mh$ = fuse_fs_poll$MH();
        try {
            return (int)mh$.invokeExact(fs, path, fi, ph, reventsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fuse_fs_fallocate$MH,"fuse_fs_fallocate");
    }
    public static int fuse_fs_fallocate ( Addressable fs,  Addressable path,  int mode,  long offset,  long length,  Addressable fi) {
        var mh$ = fuse_fs_fallocate$MH();
        try {
            return (int)mh$.invokeExact(fs, path, mode, offset, length, fi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_init$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fuse_fs_init$MH,"fuse_fs_init");
    }
    public static void fuse_fs_init ( Addressable fs,  Addressable conn) {
        var mh$ = fuse_fs_init$MH();
        try {
            mh$.invokeExact(fs, conn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fuse_fs_destroy$MH,"fuse_fs_destroy");
    }
    public static void fuse_fs_destroy ( Addressable fs) {
        var mh$ = fuse_fs_destroy$MH();
        try {
            mh$.invokeExact(fs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_notify_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fuse_notify_poll$MH,"fuse_notify_poll");
    }
    public static int fuse_notify_poll ( Addressable ph) {
        var mh$ = fuse_notify_poll$MH();
        try {
            return (int)mh$.invokeExact(ph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_new$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fuse_fs_new$MH,"fuse_fs_new");
    }
    public static MemoryAddress fuse_fs_new ( Addressable op,  long op_size,  Addressable user_data) {
        var mh$ = fuse_fs_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(op, op_size, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_register_module$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fuse_register_module$MH,"fuse_register_module");
    }
    public static void fuse_register_module ( Addressable mod) {
        var mh$ = fuse_register_module$MH();
        try {
            mh$.invokeExact(mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_setup$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fuse_setup$MH,"fuse_setup");
    }
    public static MemoryAddress fuse_setup ( int argc,  Addressable argv,  Addressable op,  long op_size,  Addressable mountpoint,  Addressable multithreaded,  Addressable user_data) {
        var mh$ = fuse_setup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(argc, argv, op, op_size, mountpoint, multithreaded, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_teardown$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fuse_teardown$MH,"fuse_teardown");
    }
    public static void fuse_teardown ( Addressable fuse,  Addressable mountpoint) {
        var mh$ = fuse_teardown$MH();
        try {
            mh$.invokeExact(fuse, mountpoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_read_cmd$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fuse_read_cmd$MH,"fuse_read_cmd");
    }
    public static MemoryAddress fuse_read_cmd ( Addressable f) {
        var mh$ = fuse_read_cmd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_process_cmd$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fuse_process_cmd$MH,"fuse_process_cmd");
    }
    public static void fuse_process_cmd ( Addressable f,  Addressable cmd) {
        var mh$ = fuse_process_cmd$MH();
        try {
            mh$.invokeExact(f, cmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_loop_mt_proc$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fuse_loop_mt_proc$MH,"fuse_loop_mt_proc");
    }
    public static int fuse_loop_mt_proc ( Addressable f,  Addressable proc,  Addressable data) {
        var mh$ = fuse_loop_mt_proc$MH();
        try {
            return (int)mh$.invokeExact(f, proc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_exited$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fuse_exited$MH,"fuse_exited");
    }
    public static int fuse_exited ( Addressable f) {
        var mh$ = fuse_exited$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_set_getcontext_func$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fuse_set_getcontext_func$MH,"fuse_set_getcontext_func");
    }
    public static void fuse_set_getcontext_func ( Addressable func) {
        var mh$ = fuse_set_getcontext_func$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_get_session$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fuse_get_session$MH,"fuse_get_session");
    }
    public static MemoryAddress fuse_get_session ( Addressable f) {
        var mh$ = fuse_get_session$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FUSE_OPT_KEY_OPT() {
        return (int)-1L;
    }
    public static int FUSE_OPT_KEY_NONOPT() {
        return (int)-2L;
    }
    public static int FUSE_OPT_KEY_KEEP() {
        return (int)-3L;
    }
    public static int FUSE_OPT_KEY_DISCARD() {
        return (int)-4L;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$39.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$40.__DARWIN_NULL$ADDR;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_FAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static int INT_FAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_FAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MAX() {
        return (int)2147483647L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static int __DARWIN_BYTE_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)120000L;
    }
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)120300L;
    }
    public static long __DARWIN_NFDBITS() {
        return 32L;
    }
    public static int NBBY() {
        return (int)8L;
    }
    public static long NFDBITS() {
        return 32L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int FUSE_VERSION() {
        return (int)29L;
    }
    public static int S_ISTXT() {
        return (int)512L;
    }
    public static int S_IREAD() {
        return (int)256L;
    }
    public static int S_IWRITE() {
        return (int)128L;
    }
    public static int S_IEXEC() {
        return (int)64L;
    }
    public static int ACCESSPERMS() {
        return (int)511L;
    }
    public static int ALLPERMS() {
        return (int)4095L;
    }
    public static int DEFFILEMODE() {
        return (int)438L;
    }
    public static int SF_SYNTHETIC() {
        return (int)3221225472L;
    }
    public static int UTIME_NOW() {
        return (int)-1L;
    }
    public static int UTIME_OMIT() {
        return (int)-2L;
    }
    public static int FUSE_CAP_ASYNC_READ() {
        return (int)1L;
    }
    public static int FUSE_CAP_POSIX_LOCKS() {
        return (int)2L;
    }
    public static int FUSE_CAP_ATOMIC_O_TRUNC() {
        return (int)8L;
    }
    public static int FUSE_CAP_EXPORT_SUPPORT() {
        return (int)16L;
    }
    public static int FUSE_CAP_BIG_WRITES() {
        return (int)32L;
    }
    public static int FUSE_CAP_DONT_MASK() {
        return (int)64L;
    }
    public static int FUSE_CAP_SPLICE_WRITE() {
        return (int)128L;
    }
    public static int FUSE_CAP_SPLICE_MOVE() {
        return (int)256L;
    }
    public static int FUSE_CAP_SPLICE_READ() {
        return (int)512L;
    }
    public static int FUSE_CAP_FLOCK_LOCKS() {
        return (int)1024L;
    }
    public static int FUSE_CAP_IOCTL_DIR() {
        return (int)2048L;
    }
    public static int FUSE_CAP_NODE_RWLOCK() {
        return (int)16777216L;
    }
    public static int FUSE_CAP_RENAME_SWAP() {
        return (int)33554432L;
    }
    public static int FUSE_CAP_RENAME_EXCL() {
        return (int)67108864L;
    }
    public static int FUSE_CAP_ALLOCATE() {
        return (int)134217728L;
    }
    public static int FUSE_CAP_EXCHANGE_DATA() {
        return (int)268435456L;
    }
    public static int FUSE_CAP_CASE_INSENSITIVE() {
        return (int)536870912L;
    }
    public static int FUSE_CAP_VOL_RENAME() {
        return (int)1073741824L;
    }
    public static int FUSE_CAP_XTIMES() {
        return (int)-2147483648L;
    }
    public static int FUSE_IOCTL_COMPAT() {
        return (int)1L;
    }
    public static int FUSE_IOCTL_UNRESTRICTED() {
        return (int)2L;
    }
    public static int FUSE_IOCTL_RETRY() {
        return (int)4L;
    }
    public static int FUSE_IOCTL_DIR() {
        return (int)16L;
    }
    public static int O_FSYNC() {
        return (int)128L;
    }
    public static int AT_FDCWD() {
        return (int)-2L;
    }
    public static int FAPPEND() {
        return (int)8L;
    }
    public static int FASYNC() {
        return (int)64L;
    }
    public static int FFSYNC() {
        return (int)128L;
    }
    public static int FFDSYNC() {
        return (int)4194304L;
    }
    public static int FNONBLOCK() {
        return (int)4L;
    }
    public static int FNDELAY() {
        return (int)4L;
    }
    public static int O_NDELAY() {
        return (int)4L;
    }
    public static int CPF_MASK() {
        return (int)3L;
    }
    public static int O_POPUP() {
        return (int)2147483648L;
    }
    public static int FILESEC_GUID() {
        return (int)3L;
    }
    public static MemoryAddress _FILESEC_UNSET_PROPERTY() {
        return constants$40._FILESEC_UNSET_PROPERTY$ADDR;
    }
    public static MemoryAddress _FILESEC_REMOVE_ACL() {
        return constants$40._FILESEC_REMOVE_ACL$ADDR;
    }
    public static int __DARWIN_WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __DARWIN_WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int __DARWIN_WEOF() {
        return (int)-1L;
    }
    public static MemoryAddress NULL() {
        return constants$40.NULL$ADDR;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)6L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_MONOTONIC_RAW_APPROX() {
        return (int)5L;
    }
    public static int CLOCK_UPTIME_RAW() {
        return (int)8L;
    }
    public static int CLOCK_UPTIME_RAW_APPROX() {
        return (int)9L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)12L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)16L;
    }
    public static int ARG_MAX() {
        return (int)1048576L;
    }
    public static int GID_MAX() {
        return (int)2147483647L;
    }
    public static int UID_MAX() {
        return (int)2147483647L;
    }
    public static int MAXUPRC() {
        return (int)266L;
    }
    public static int NCARGS() {
        return (int)1048576L;
    }
    public static int NGROUPS() {
        return (int)16L;
    }
    public static long __DARWIN_ALIGNBYTES() {
        return 7L;
    }
    public static long __DARWIN_ALIGNBYTES32() {
        return 3L;
    }
    public static long ALIGNBYTES() {
        return 7L;
    }
    public static int PGOFSET() {
        return (int)4095L;
    }
    public static int MAXPHYS() {
        return (int)65536L;
    }
    public static int MSIZE() {
        return (int)256L;
    }
    public static int MCLBYTES() {
        return (int)2048L;
    }
    public static int MBIGCLBYTES() {
        return (int)4096L;
    }
    public static int M16KCLBYTES() {
        return (int)16384L;
    }
    public static int MCLOFSET() {
        return (int)2047L;
    }
    public static int CLK_TCK() {
        return (int)100L;
    }
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    public static long ULONG_MAX() {
        return -1L;
    }
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    public static long ULLONG_MAX() {
        return -1L;
    }
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static long SIZE_T_MAX() {
        return -1L;
    }
    public static long UQUAD_MAX() {
        return -1L;
    }
    public static long QUAD_MAX() {
        return 9223372036854775807L;
    }
    public static long QUAD_MIN() {
        return -9223372036854775808L;
    }
    public static int _POSIX_RE_DUP_MAX() {
        return (int)255L;
    }
    public static long OFF_MIN() {
        return -9223372036854775808L;
    }
    public static long OFF_MAX() {
        return 9223372036854775807L;
    }
    public static long LONG_LONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LONG_LONG_MIN() {
        return -9223372036854775808L;
    }
    public static long ULONG_LONG_MAX() {
        return -1L;
    }
    public static int NSIG() {
        return (int)32L;
    }
    public static int SIGIOT() {
        return (int)6L;
    }
    public static MemoryAddress SIG_DFL() {
        return constants$40.SIG_DFL$ADDR;
    }
    public static MemoryAddress SIG_IGN() {
        return constants$40.SIG_IGN$ADDR;
    }
    public static MemoryAddress SIG_HOLD() {
        return constants$41.SIG_HOLD$ADDR;
    }
    public static MemoryAddress SIG_ERR() {
        return constants$41.SIG_ERR$ADDR;
    }
    public static int SA_USERSPACE_MASK() {
        return (int)127L;
    }
    public static int SV_ONSTACK() {
        return (int)1L;
    }
    public static int SV_INTERRUPT() {
        return (int)2L;
    }
    public static int SV_RESETHAND() {
        return (int)4L;
    }
    public static int SV_NODEFER() {
        return (int)16L;
    }
    public static int SV_NOCLDSTOP() {
        return (int)8L;
    }
    public static int SV_SIGINFO() {
        return (int)64L;
    }
    public static MemoryAddress BADSIG() {
        return constants$41.BADSIG$ADDR;
    }
    public static long NBPW() {
        return 4L;
    }
    public static int NODEV() {
        return (int)-1L;
    }
    public static int CLBYTES() {
        return (int)4096L;
    }
    public static int CLOFSET() {
        return (int)4095L;
    }
    public static int CLOFF() {
        return (int)4095L;
    }
    public static int CLSHIFT() {
        return (int)12L;
    }
    public static int CBQSIZE() {
        return (int)8L;
    }
    public static long CBSIZE() {
        return 48L;
    }
    public static int CROUND() {
        return (int)63L;
    }
    public static int MAXBSIZE() {
        return (int)1048576L;
    }
    public static int MAXPHYSIO() {
        return (int)65536L;
    }
    public static int MAXPHYSIO_WIRED() {
        return (int)16777216L;
    }
    public static int MAXPATHLEN() {
        return (int)1024L;
    }
    public static int FSCALE() {
        return (int)2048L;
    }
    public static int AUDIT_RECORD_MAGIC() {
        return (int)2190085915L;
    }
    public static int MAXAUDITDATA() {
        return (int)32767L;
    }
    public static int MAX_AUDIT_RECORD_SIZE() {
        return (int)32767L;
    }
    public static int MIN_AUDIT_FILE_SIZE() {
        return (int)524288L;
    }
    public static MemorySegment AUDITDEV_FILENAME() {
        return constants$41.AUDITDEV_FILENAME$SEGMENT;
    }
    public static int AU_DEFAUDITID() {
        return (int)4294967295L;
    }
    public static int AU_ASSIGN_ASID() {
        return (int)-1L;
    }
    public static byte AT_IPC_MSG() {
        return (byte)1L;
    }
    public static byte AT_IPC_SEM() {
        return (byte)2L;
    }
    public static byte AT_IPC_SHM() {
        return (byte)3L;
    }
    public static int AUC_DISABLED() {
        return (int)-1L;
    }
    public static int AQ_BUFSZ() {
        return (int)32767L;
    }
    public static byte AUDIT_CTLMODE_NORMAL() {
        return (byte)1L;
    }
    public static byte AUDIT_CTLMODE_EXTERNAL() {
        return (byte)2L;
    }
    public static byte AUDIT_EXPIRE_OP_AND() {
        return (byte)0L;
    }
    public static byte AUDIT_EXPIRE_OP_OR() {
        return (byte)1L;
    }
    public static int MACH_PORT_DEAD() {
        return (int)4294967295L;
    }
    public static int MACH_PORT_RIGHT_SEND() {
        return (int)0L;
    }
    public static int MACH_PORT_RIGHT_RECEIVE() {
        return (int)1L;
    }
    public static int MACH_PORT_RIGHT_SEND_ONCE() {
        return (int)2L;
    }
    public static int MACH_PORT_RIGHT_PORT_SET() {
        return (int)3L;
    }
    public static int MACH_PORT_RIGHT_DEAD_NAME() {
        return (int)4L;
    }
    public static int MACH_PORT_RIGHT_LABELH() {
        return (int)5L;
    }
    public static int MACH_PORT_RIGHT_NUMBER() {
        return (int)6L;
    }
    public static int MACH_PORT_TYPE_NONE() {
        return (int)0L;
    }
    public static int MACH_PORT_TYPE_SEND() {
        return (int)65536L;
    }
    public static int MACH_PORT_TYPE_RECEIVE() {
        return (int)131072L;
    }
    public static int MACH_PORT_TYPE_SEND_ONCE() {
        return (int)262144L;
    }
    public static int MACH_PORT_TYPE_PORT_SET() {
        return (int)524288L;
    }
    public static int MACH_PORT_TYPE_DEAD_NAME() {
        return (int)1048576L;
    }
    public static int MACH_PORT_TYPE_LABELH() {
        return (int)2097152L;
    }
    public static int MACH_PORT_TYPE_SEND_RECEIVE() {
        return (int)196608L;
    }
    public static int MACH_PORT_TYPE_SEND_RIGHTS() {
        return (int)327680L;
    }
    public static int MACH_PORT_TYPE_PORT_RIGHTS() {
        return (int)458752L;
    }
    public static int MACH_PORT_TYPE_PORT_OR_DEAD() {
        return (int)1507328L;
    }
    public static int MACH_PORT_TYPE_ALL_RIGHTS() {
        return (int)2031616L;
    }
    public static int MACH_PORT_TYPE_DNREQUEST() {
        return (int)2147483648L;
    }
    public static int MACH_PORT_QLIMIT_ZERO() {
        return (int)0L;
    }
    public static int MACH_PORT_QLIMIT_BASIC() {
        return (int)5L;
    }
    public static int MACH_PORT_QLIMIT_SMALL() {
        return (int)16L;
    }
    public static int MACH_PORT_QLIMIT_LARGE() {
        return (int)1024L;
    }
    public static int MACH_PORT_QLIMIT_KERNEL() {
        return (int)65534L;
    }
    public static int MACH_PORT_QLIMIT_MIN() {
        return (int)0L;
    }
    public static int MACH_PORT_QLIMIT_DEFAULT() {
        return (int)5L;
    }
    public static int MACH_PORT_QLIMIT_MAX() {
        return (int)1024L;
    }
    public static int MACH_PORT_LIMITS_INFO_COUNT() {
        return (int)1L;
    }
    public static int MACH_PORT_RECEIVE_STATUS_COUNT() {
        return (int)10L;
    }
    public static int MACH_PORT_INFO_EXT_COUNT() {
        return (int)17L;
    }
    public static int MACH_PORT_GUARD_INFO_COUNT() {
        return (int)2L;
    }
    public static byte MACH_SERVICE_PORT_INFO_COUNT() {
        return (byte)0L;
    }
    public static int MAX_FATAL_kGUARD_EXC_CODE() {
        return (int)128L;
    }
    public static long MPG_FLAGS_NONE() {
        return 0L;
    }
    public static int MAX_OPTIONAL_kGUARD_EXC_CODE() {
        return (int)524288L;
    }
    public static long MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP() {
        return 72057594037927936L;
    }
    public static long MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT() {
        return 144115188075855872L;
    }
    public static long MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER() {
        return 288230376151711744L;
    }
    public static long MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR() {
        return 576460752303423488L;
    }
    public static long MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA() {
        return 1152921504606846976L;
    }
    public static long MPG_FLAGS_STRICT_REPLY_MASK() {
        return -72057594037927936L;
    }
    public static long MPG_FLAGS_MOD_REFS_PINNED_DEALLOC() {
        return 72057594037927936L;
    }
    public static long MPG_FLAGS_MOD_REFS_PINNED_DESTROY() {
        return 144115188075855872L;
    }
    public static long MPG_FLAGS_MOD_REFS_PINNED_COPYIN() {
        return 288230376151711744L;
    }
    public static long MPG_FLAGS_IMMOVABLE_PINNED() {
        return 72057594037927936L;
    }
    public static MemoryAddress NOCRED() {
        return constants$41.NOCRED$ADDR;
    }
    public static MemoryAddress FSCRED() {
        return constants$41.FSCRED$ADDR;
    }
    public static int ATTR_CMN_RETURNED_ATTRS() {
        return (int)2147483648L;
    }
    public static int ATTR_CMN_VALIDMASK() {
        return (int)4294967295L;
    }
    public static int ATTR_VOL_INFO() {
        return (int)2147483648L;
    }
    public static int ATTR_VOL_VALIDMASK() {
        return (int)4035444735L;
    }
    public static int ATTR_VOL_SETMASK() {
        return (int)2147491840L;
    }
    public static int ATTR_FORK_RESERVED() {
        return (int)4294967295L;
    }
    public static int ATTR_BULK_REQUIRED() {
        return (int)2147483649L;
    }
    public static int SRCHFS_NEGATEPARAMS() {
        return (int)2147483648L;
    }
    public static int SRCHFS_VALIDOPTIONSMASK() {
        return (int)2147483903L;
    }
    public static int FST_EOF() {
        return (int)-1L;
    }
    public static int MNAMELEN() {
        return (int)1024L;
    }
    public static int MNT_STRICTATIME() {
        return (int)2147483648L;
    }
    public static int MNT_UNKNOWNPERMISSIONS() {
        return (int)2097152L;
    }
    public static int MNT_VISFLAGMASK() {
        return (int)3757111295L;
    }
    public static int MNT_CMDFLAGS() {
        return (int)983040L;
    }
    public static int VFS_CTL_STATFS() {
        return (int)65547L;
    }
    public static int NFS_MAX_FH_SIZE() {
        return (int)128L;
    }
}


