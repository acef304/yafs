// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class clockinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("hz"),
        Constants$root.C_INT$LAYOUT.withName("tick"),
        Constants$root.C_INT$LAYOUT.withName("tickadj"),
        Constants$root.C_INT$LAYOUT.withName("stathz"),
        Constants$root.C_INT$LAYOUT.withName("profhz")
    ).withName("clockinfo");
    public static MemoryLayout $LAYOUT() {
        return clockinfo.$struct$LAYOUT;
    }
    static final VarHandle hz$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hz"));
    public static VarHandle hz$VH() {
        return clockinfo.hz$VH;
    }
    public static int hz$get(MemorySegment seg) {
        return (int)clockinfo.hz$VH.get(seg);
    }
    public static void hz$set( MemorySegment seg, int x) {
        clockinfo.hz$VH.set(seg, x);
    }
    public static int hz$get(MemorySegment seg, long index) {
        return (int)clockinfo.hz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hz$set(MemorySegment seg, long index, int x) {
        clockinfo.hz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tick$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tick"));
    public static VarHandle tick$VH() {
        return clockinfo.tick$VH;
    }
    public static int tick$get(MemorySegment seg) {
        return (int)clockinfo.tick$VH.get(seg);
    }
    public static void tick$set( MemorySegment seg, int x) {
        clockinfo.tick$VH.set(seg, x);
    }
    public static int tick$get(MemorySegment seg, long index) {
        return (int)clockinfo.tick$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tick$set(MemorySegment seg, long index, int x) {
        clockinfo.tick$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tickadj$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tickadj"));
    public static VarHandle tickadj$VH() {
        return clockinfo.tickadj$VH;
    }
    public static int tickadj$get(MemorySegment seg) {
        return (int)clockinfo.tickadj$VH.get(seg);
    }
    public static void tickadj$set( MemorySegment seg, int x) {
        clockinfo.tickadj$VH.set(seg, x);
    }
    public static int tickadj$get(MemorySegment seg, long index) {
        return (int)clockinfo.tickadj$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tickadj$set(MemorySegment seg, long index, int x) {
        clockinfo.tickadj$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stathz$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stathz"));
    public static VarHandle stathz$VH() {
        return clockinfo.stathz$VH;
    }
    public static int stathz$get(MemorySegment seg) {
        return (int)clockinfo.stathz$VH.get(seg);
    }
    public static void stathz$set( MemorySegment seg, int x) {
        clockinfo.stathz$VH.set(seg, x);
    }
    public static int stathz$get(MemorySegment seg, long index) {
        return (int)clockinfo.stathz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stathz$set(MemorySegment seg, long index, int x) {
        clockinfo.stathz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle profhz$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("profhz"));
    public static VarHandle profhz$VH() {
        return clockinfo.profhz$VH;
    }
    public static int profhz$get(MemorySegment seg) {
        return (int)clockinfo.profhz$VH.get(seg);
    }
    public static void profhz$set( MemorySegment seg, int x) {
        clockinfo.profhz$VH.set(seg, x);
    }
    public static int profhz$get(MemorySegment seg, long index) {
        return (int)clockinfo.profhz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void profhz$set(MemorySegment seg, long index, int x) {
        clockinfo.profhz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


