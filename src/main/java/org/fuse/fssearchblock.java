// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fssearchblock {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("returnattrs"),
        Constants$root.C_POINTER$LAYOUT.withName("returnbuffer"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("returnbuffersize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("maxmatches"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_INT$LAYOUT.withName("tv_usec"),
            MemoryLayout.paddingLayout(32)
        ).withName("timelimit"),
        Constants$root.C_POINTER$LAYOUT.withName("searchparams1"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sizeofsearchparams1"),
        Constants$root.C_POINTER$LAYOUT.withName("searchparams2"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sizeofsearchparams2"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("bitmapcount"),
            Constants$root.C_SHORT$LAYOUT.withName("reserved"),
            Constants$root.C_INT$LAYOUT.withName("commonattr"),
            Constants$root.C_INT$LAYOUT.withName("volattr"),
            Constants$root.C_INT$LAYOUT.withName("dirattr"),
            Constants$root.C_INT$LAYOUT.withName("fileattr"),
            Constants$root.C_INT$LAYOUT.withName("forkattr")
        ).withName("searchattrs")
    ).withName("fssearchblock");
    public static MemoryLayout $LAYOUT() {
        return fssearchblock.$struct$LAYOUT;
    }
    static final VarHandle returnattrs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("returnattrs"));
    public static VarHandle returnattrs$VH() {
        return fssearchblock.returnattrs$VH;
    }
    public static MemoryAddress returnattrs$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.returnattrs$VH.get(seg);
    }
    public static void returnattrs$set( MemorySegment seg, MemoryAddress x) {
        fssearchblock.returnattrs$VH.set(seg, x);
    }
    public static MemoryAddress returnattrs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.returnattrs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void returnattrs$set(MemorySegment seg, long index, MemoryAddress x) {
        fssearchblock.returnattrs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle returnbuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("returnbuffer"));
    public static VarHandle returnbuffer$VH() {
        return fssearchblock.returnbuffer$VH;
    }
    public static MemoryAddress returnbuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.returnbuffer$VH.get(seg);
    }
    public static void returnbuffer$set( MemorySegment seg, MemoryAddress x) {
        fssearchblock.returnbuffer$VH.set(seg, x);
    }
    public static MemoryAddress returnbuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.returnbuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void returnbuffer$set(MemorySegment seg, long index, MemoryAddress x) {
        fssearchblock.returnbuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle returnbuffersize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("returnbuffersize"));
    public static VarHandle returnbuffersize$VH() {
        return fssearchblock.returnbuffersize$VH;
    }
    public static long returnbuffersize$get(MemorySegment seg) {
        return (long)fssearchblock.returnbuffersize$VH.get(seg);
    }
    public static void returnbuffersize$set( MemorySegment seg, long x) {
        fssearchblock.returnbuffersize$VH.set(seg, x);
    }
    public static long returnbuffersize$get(MemorySegment seg, long index) {
        return (long)fssearchblock.returnbuffersize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void returnbuffersize$set(MemorySegment seg, long index, long x) {
        fssearchblock.returnbuffersize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maxmatches$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maxmatches"));
    public static VarHandle maxmatches$VH() {
        return fssearchblock.maxmatches$VH;
    }
    public static long maxmatches$get(MemorySegment seg) {
        return (long)fssearchblock.maxmatches$VH.get(seg);
    }
    public static void maxmatches$set( MemorySegment seg, long x) {
        fssearchblock.maxmatches$VH.set(seg, x);
    }
    public static long maxmatches$get(MemorySegment seg, long index) {
        return (long)fssearchblock.maxmatches$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maxmatches$set(MemorySegment seg, long index, long x) {
        fssearchblock.maxmatches$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment timelimit$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle searchparams1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("searchparams1"));
    public static VarHandle searchparams1$VH() {
        return fssearchblock.searchparams1$VH;
    }
    public static MemoryAddress searchparams1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.searchparams1$VH.get(seg);
    }
    public static void searchparams1$set( MemorySegment seg, MemoryAddress x) {
        fssearchblock.searchparams1$VH.set(seg, x);
    }
    public static MemoryAddress searchparams1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.searchparams1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void searchparams1$set(MemorySegment seg, long index, MemoryAddress x) {
        fssearchblock.searchparams1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sizeofsearchparams1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sizeofsearchparams1"));
    public static VarHandle sizeofsearchparams1$VH() {
        return fssearchblock.sizeofsearchparams1$VH;
    }
    public static long sizeofsearchparams1$get(MemorySegment seg) {
        return (long)fssearchblock.sizeofsearchparams1$VH.get(seg);
    }
    public static void sizeofsearchparams1$set( MemorySegment seg, long x) {
        fssearchblock.sizeofsearchparams1$VH.set(seg, x);
    }
    public static long sizeofsearchparams1$get(MemorySegment seg, long index) {
        return (long)fssearchblock.sizeofsearchparams1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sizeofsearchparams1$set(MemorySegment seg, long index, long x) {
        fssearchblock.sizeofsearchparams1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle searchparams2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("searchparams2"));
    public static VarHandle searchparams2$VH() {
        return fssearchblock.searchparams2$VH;
    }
    public static MemoryAddress searchparams2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.searchparams2$VH.get(seg);
    }
    public static void searchparams2$set( MemorySegment seg, MemoryAddress x) {
        fssearchblock.searchparams2$VH.set(seg, x);
    }
    public static MemoryAddress searchparams2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fssearchblock.searchparams2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void searchparams2$set(MemorySegment seg, long index, MemoryAddress x) {
        fssearchblock.searchparams2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sizeofsearchparams2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sizeofsearchparams2"));
    public static VarHandle sizeofsearchparams2$VH() {
        return fssearchblock.sizeofsearchparams2$VH;
    }
    public static long sizeofsearchparams2$get(MemorySegment seg) {
        return (long)fssearchblock.sizeofsearchparams2$VH.get(seg);
    }
    public static void sizeofsearchparams2$set( MemorySegment seg, long x) {
        fssearchblock.sizeofsearchparams2$VH.set(seg, x);
    }
    public static long sizeofsearchparams2$get(MemorySegment seg, long index) {
        return (long)fssearchblock.sizeofsearchparams2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sizeofsearchparams2$set(MemorySegment seg, long index, long x) {
        fssearchblock.sizeofsearchparams2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment searchattrs$slice(MemorySegment seg) {
        return seg.asSlice(80, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


