// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class xucred {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("cr_version"),
        Constants$root.C_INT$LAYOUT.withName("cr_uid"),
        Constants$root.C_SHORT$LAYOUT.withName("cr_ngroups"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.sequenceLayout(16, Constants$root.C_INT$LAYOUT).withName("cr_groups")
    ).withName("xucred");
    public static MemoryLayout $LAYOUT() {
        return xucred.$struct$LAYOUT;
    }
    static final VarHandle cr_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cr_version"));
    public static VarHandle cr_version$VH() {
        return xucred.cr_version$VH;
    }
    public static int cr_version$get(MemorySegment seg) {
        return (int)xucred.cr_version$VH.get(seg);
    }
    public static void cr_version$set( MemorySegment seg, int x) {
        xucred.cr_version$VH.set(seg, x);
    }
    public static int cr_version$get(MemorySegment seg, long index) {
        return (int)xucred.cr_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cr_version$set(MemorySegment seg, long index, int x) {
        xucred.cr_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cr_uid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cr_uid"));
    public static VarHandle cr_uid$VH() {
        return xucred.cr_uid$VH;
    }
    public static int cr_uid$get(MemorySegment seg) {
        return (int)xucred.cr_uid$VH.get(seg);
    }
    public static void cr_uid$set( MemorySegment seg, int x) {
        xucred.cr_uid$VH.set(seg, x);
    }
    public static int cr_uid$get(MemorySegment seg, long index) {
        return (int)xucred.cr_uid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cr_uid$set(MemorySegment seg, long index, int x) {
        xucred.cr_uid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cr_ngroups$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cr_ngroups"));
    public static VarHandle cr_ngroups$VH() {
        return xucred.cr_ngroups$VH;
    }
    public static short cr_ngroups$get(MemorySegment seg) {
        return (short)xucred.cr_ngroups$VH.get(seg);
    }
    public static void cr_ngroups$set( MemorySegment seg, short x) {
        xucred.cr_ngroups$VH.set(seg, x);
    }
    public static short cr_ngroups$get(MemorySegment seg, long index) {
        return (short)xucred.cr_ngroups$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cr_ngroups$set(MemorySegment seg, long index, short x) {
        xucred.cr_ngroups$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cr_groups$slice(MemorySegment seg) {
        return seg.asSlice(12, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


