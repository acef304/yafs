// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fgetsigsinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("fg_file_start"),
        Constants$root.C_INT$LAYOUT.withName("fg_info_request"),
        Constants$root.C_INT$LAYOUT.withName("fg_sig_is_platform")
    ).withName("fgetsigsinfo");
    public static MemoryLayout $LAYOUT() {
        return fgetsigsinfo.$struct$LAYOUT;
    }
    static final VarHandle fg_file_start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fg_file_start"));
    public static VarHandle fg_file_start$VH() {
        return fgetsigsinfo.fg_file_start$VH;
    }
    public static long fg_file_start$get(MemorySegment seg) {
        return (long)fgetsigsinfo.fg_file_start$VH.get(seg);
    }
    public static void fg_file_start$set( MemorySegment seg, long x) {
        fgetsigsinfo.fg_file_start$VH.set(seg, x);
    }
    public static long fg_file_start$get(MemorySegment seg, long index) {
        return (long)fgetsigsinfo.fg_file_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fg_file_start$set(MemorySegment seg, long index, long x) {
        fgetsigsinfo.fg_file_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fg_info_request$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fg_info_request"));
    public static VarHandle fg_info_request$VH() {
        return fgetsigsinfo.fg_info_request$VH;
    }
    public static int fg_info_request$get(MemorySegment seg) {
        return (int)fgetsigsinfo.fg_info_request$VH.get(seg);
    }
    public static void fg_info_request$set( MemorySegment seg, int x) {
        fgetsigsinfo.fg_info_request$VH.set(seg, x);
    }
    public static int fg_info_request$get(MemorySegment seg, long index) {
        return (int)fgetsigsinfo.fg_info_request$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fg_info_request$set(MemorySegment seg, long index, int x) {
        fgetsigsinfo.fg_info_request$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fg_sig_is_platform$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fg_sig_is_platform"));
    public static VarHandle fg_sig_is_platform$VH() {
        return fgetsigsinfo.fg_sig_is_platform$VH;
    }
    public static int fg_sig_is_platform$get(MemorySegment seg) {
        return (int)fgetsigsinfo.fg_sig_is_platform$VH.get(seg);
    }
    public static void fg_sig_is_platform$set( MemorySegment seg, int x) {
        fgetsigsinfo.fg_sig_is_platform$VH.set(seg, x);
    }
    public static int fg_sig_is_platform$get(MemorySegment seg, long index) {
        return (int)fgetsigsinfo.fg_sig_is_platform$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fg_sig_is_platform$set(MemorySegment seg, long index, int x) {
        fgetsigsinfo.fg_sig_is_platform$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


