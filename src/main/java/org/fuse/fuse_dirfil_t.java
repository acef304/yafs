// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface fuse_dirfil_t {

    int apply(java.lang.foreign.MemoryAddress h, java.lang.foreign.MemoryAddress name, int type, long ino);
    static MemorySegment allocate(fuse_dirfil_t fi, MemorySession session) {
        return RuntimeHelper.upcallStub(fuse_dirfil_t.class, fi, constants$25.fuse_dirfil_t$FUNC, session);
    }
    static fuse_dirfil_t ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _h, java.lang.foreign.MemoryAddress _name, int _type, long _ino) -> {
            try {
                return (int)constants$25.fuse_dirfil_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_h, (java.lang.foreign.Addressable)_name, _type, _ino);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


