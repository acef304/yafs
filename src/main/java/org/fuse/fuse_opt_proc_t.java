// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface fuse_opt_proc_t {

    int apply(java.lang.foreign.MemoryAddress data, java.lang.foreign.MemoryAddress arg, int key, java.lang.foreign.MemoryAddress outargs);
    static MemorySegment allocate(fuse_opt_proc_t fi, MemorySession session) {
        return RuntimeHelper.upcallStub(fuse_opt_proc_t.class, fi, constants$0.fuse_opt_proc_t$FUNC, session);
    }
    static fuse_opt_proc_t ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _data, java.lang.foreign.MemoryAddress _arg, int _key, java.lang.foreign.MemoryAddress _outargs) -> {
            try {
                return (int)constants$0.fuse_opt_proc_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_data, (java.lang.foreign.Addressable)_arg, _key, (java.lang.foreign.Addressable)_outargs);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


