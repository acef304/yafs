// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class sigvec {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("sv_handler"),
        Constants$root.C_INT$LAYOUT.withName("sv_mask"),
        Constants$root.C_INT$LAYOUT.withName("sv_flags")
    ).withName("sigvec");
    public static MemoryLayout $LAYOUT() {
        return sigvec.$struct$LAYOUT;
    }
    static final FunctionDescriptor sv_handler$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle sv_handler$MH = RuntimeHelper.downcallHandle(
        sigvec.sv_handler$FUNC
    );
    public interface sv_handler {

        void apply(int _x0);
        static MemorySegment allocate(sv_handler fi, MemorySession session) {
            return RuntimeHelper.upcallStub(sv_handler.class, fi, sigvec.sv_handler$FUNC, session);
        }
        static sv_handler ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0) -> {
                try {
                    sigvec.sv_handler$MH.invokeExact((Addressable)symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle sv_handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sv_handler"));
    public static VarHandle sv_handler$VH() {
        return sigvec.sv_handler$VH;
    }
    public static MemoryAddress sv_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)sigvec.sv_handler$VH.get(seg);
    }
    public static void sv_handler$set( MemorySegment seg, MemoryAddress x) {
        sigvec.sv_handler$VH.set(seg, x);
    }
    public static MemoryAddress sv_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)sigvec.sv_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sv_handler$set(MemorySegment seg, long index, MemoryAddress x) {
        sigvec.sv_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sv_handler sv_handler (MemorySegment segment, MemorySession session) {
        return sv_handler.ofAddress(sv_handler$get(segment), session);
    }
    static final VarHandle sv_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sv_mask"));
    public static VarHandle sv_mask$VH() {
        return sigvec.sv_mask$VH;
    }
    public static int sv_mask$get(MemorySegment seg) {
        return (int)sigvec.sv_mask$VH.get(seg);
    }
    public static void sv_mask$set( MemorySegment seg, int x) {
        sigvec.sv_mask$VH.set(seg, x);
    }
    public static int sv_mask$get(MemorySegment seg, long index) {
        return (int)sigvec.sv_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sv_mask$set(MemorySegment seg, long index, int x) {
        sigvec.sv_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sv_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sv_flags"));
    public static VarHandle sv_flags$VH() {
        return sigvec.sv_flags$VH;
    }
    public static int sv_flags$get(MemorySegment seg) {
        return (int)sigvec.sv_flags$VH.get(seg);
    }
    public static void sv_flags$set( MemorySegment seg, int x) {
        sigvec.sv_flags$VH.set(seg, x);
    }
    public static int sv_flags$get(MemorySegment seg, long index) {
        return (int)sigvec.sv_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sv_flags$set(MemorySegment seg, long index, int x) {
        sigvec.sv_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


