// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class audit_stat {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("as_version"),
        Constants$root.C_INT$LAYOUT.withName("as_numevent"),
        Constants$root.C_INT$LAYOUT.withName("as_generated"),
        Constants$root.C_INT$LAYOUT.withName("as_nonattrib"),
        Constants$root.C_INT$LAYOUT.withName("as_kernel"),
        Constants$root.C_INT$LAYOUT.withName("as_audit"),
        Constants$root.C_INT$LAYOUT.withName("as_auditctl"),
        Constants$root.C_INT$LAYOUT.withName("as_enqueue"),
        Constants$root.C_INT$LAYOUT.withName("as_written"),
        Constants$root.C_INT$LAYOUT.withName("as_wblocked"),
        Constants$root.C_INT$LAYOUT.withName("as_rblocked"),
        Constants$root.C_INT$LAYOUT.withName("as_dropped"),
        Constants$root.C_INT$LAYOUT.withName("as_totalsize"),
        Constants$root.C_INT$LAYOUT.withName("as_memused")
    ).withName("audit_stat");
    public static MemoryLayout $LAYOUT() {
        return audit_stat.$struct$LAYOUT;
    }
    static final VarHandle as_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_version"));
    public static VarHandle as_version$VH() {
        return audit_stat.as_version$VH;
    }
    public static int as_version$get(MemorySegment seg) {
        return (int)audit_stat.as_version$VH.get(seg);
    }
    public static void as_version$set( MemorySegment seg, int x) {
        audit_stat.as_version$VH.set(seg, x);
    }
    public static int as_version$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_version$set(MemorySegment seg, long index, int x) {
        audit_stat.as_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_numevent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_numevent"));
    public static VarHandle as_numevent$VH() {
        return audit_stat.as_numevent$VH;
    }
    public static int as_numevent$get(MemorySegment seg) {
        return (int)audit_stat.as_numevent$VH.get(seg);
    }
    public static void as_numevent$set( MemorySegment seg, int x) {
        audit_stat.as_numevent$VH.set(seg, x);
    }
    public static int as_numevent$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_numevent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_numevent$set(MemorySegment seg, long index, int x) {
        audit_stat.as_numevent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_generated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_generated"));
    public static VarHandle as_generated$VH() {
        return audit_stat.as_generated$VH;
    }
    public static int as_generated$get(MemorySegment seg) {
        return (int)audit_stat.as_generated$VH.get(seg);
    }
    public static void as_generated$set( MemorySegment seg, int x) {
        audit_stat.as_generated$VH.set(seg, x);
    }
    public static int as_generated$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_generated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_generated$set(MemorySegment seg, long index, int x) {
        audit_stat.as_generated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_nonattrib$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_nonattrib"));
    public static VarHandle as_nonattrib$VH() {
        return audit_stat.as_nonattrib$VH;
    }
    public static int as_nonattrib$get(MemorySegment seg) {
        return (int)audit_stat.as_nonattrib$VH.get(seg);
    }
    public static void as_nonattrib$set( MemorySegment seg, int x) {
        audit_stat.as_nonattrib$VH.set(seg, x);
    }
    public static int as_nonattrib$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_nonattrib$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_nonattrib$set(MemorySegment seg, long index, int x) {
        audit_stat.as_nonattrib$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_kernel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_kernel"));
    public static VarHandle as_kernel$VH() {
        return audit_stat.as_kernel$VH;
    }
    public static int as_kernel$get(MemorySegment seg) {
        return (int)audit_stat.as_kernel$VH.get(seg);
    }
    public static void as_kernel$set( MemorySegment seg, int x) {
        audit_stat.as_kernel$VH.set(seg, x);
    }
    public static int as_kernel$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_kernel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_kernel$set(MemorySegment seg, long index, int x) {
        audit_stat.as_kernel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_audit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_audit"));
    public static VarHandle as_audit$VH() {
        return audit_stat.as_audit$VH;
    }
    public static int as_audit$get(MemorySegment seg) {
        return (int)audit_stat.as_audit$VH.get(seg);
    }
    public static void as_audit$set( MemorySegment seg, int x) {
        audit_stat.as_audit$VH.set(seg, x);
    }
    public static int as_audit$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_audit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_audit$set(MemorySegment seg, long index, int x) {
        audit_stat.as_audit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_auditctl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_auditctl"));
    public static VarHandle as_auditctl$VH() {
        return audit_stat.as_auditctl$VH;
    }
    public static int as_auditctl$get(MemorySegment seg) {
        return (int)audit_stat.as_auditctl$VH.get(seg);
    }
    public static void as_auditctl$set( MemorySegment seg, int x) {
        audit_stat.as_auditctl$VH.set(seg, x);
    }
    public static int as_auditctl$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_auditctl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_auditctl$set(MemorySegment seg, long index, int x) {
        audit_stat.as_auditctl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_enqueue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_enqueue"));
    public static VarHandle as_enqueue$VH() {
        return audit_stat.as_enqueue$VH;
    }
    public static int as_enqueue$get(MemorySegment seg) {
        return (int)audit_stat.as_enqueue$VH.get(seg);
    }
    public static void as_enqueue$set( MemorySegment seg, int x) {
        audit_stat.as_enqueue$VH.set(seg, x);
    }
    public static int as_enqueue$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_enqueue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_enqueue$set(MemorySegment seg, long index, int x) {
        audit_stat.as_enqueue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_written$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_written"));
    public static VarHandle as_written$VH() {
        return audit_stat.as_written$VH;
    }
    public static int as_written$get(MemorySegment seg) {
        return (int)audit_stat.as_written$VH.get(seg);
    }
    public static void as_written$set( MemorySegment seg, int x) {
        audit_stat.as_written$VH.set(seg, x);
    }
    public static int as_written$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_written$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_written$set(MemorySegment seg, long index, int x) {
        audit_stat.as_written$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_wblocked$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_wblocked"));
    public static VarHandle as_wblocked$VH() {
        return audit_stat.as_wblocked$VH;
    }
    public static int as_wblocked$get(MemorySegment seg) {
        return (int)audit_stat.as_wblocked$VH.get(seg);
    }
    public static void as_wblocked$set( MemorySegment seg, int x) {
        audit_stat.as_wblocked$VH.set(seg, x);
    }
    public static int as_wblocked$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_wblocked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_wblocked$set(MemorySegment seg, long index, int x) {
        audit_stat.as_wblocked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_rblocked$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_rblocked"));
    public static VarHandle as_rblocked$VH() {
        return audit_stat.as_rblocked$VH;
    }
    public static int as_rblocked$get(MemorySegment seg) {
        return (int)audit_stat.as_rblocked$VH.get(seg);
    }
    public static void as_rblocked$set( MemorySegment seg, int x) {
        audit_stat.as_rblocked$VH.set(seg, x);
    }
    public static int as_rblocked$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_rblocked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_rblocked$set(MemorySegment seg, long index, int x) {
        audit_stat.as_rblocked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_dropped$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_dropped"));
    public static VarHandle as_dropped$VH() {
        return audit_stat.as_dropped$VH;
    }
    public static int as_dropped$get(MemorySegment seg) {
        return (int)audit_stat.as_dropped$VH.get(seg);
    }
    public static void as_dropped$set( MemorySegment seg, int x) {
        audit_stat.as_dropped$VH.set(seg, x);
    }
    public static int as_dropped$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_dropped$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_dropped$set(MemorySegment seg, long index, int x) {
        audit_stat.as_dropped$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_totalsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_totalsize"));
    public static VarHandle as_totalsize$VH() {
        return audit_stat.as_totalsize$VH;
    }
    public static int as_totalsize$get(MemorySegment seg) {
        return (int)audit_stat.as_totalsize$VH.get(seg);
    }
    public static void as_totalsize$set( MemorySegment seg, int x) {
        audit_stat.as_totalsize$VH.set(seg, x);
    }
    public static int as_totalsize$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_totalsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_totalsize$set(MemorySegment seg, long index, int x) {
        audit_stat.as_totalsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle as_memused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("as_memused"));
    public static VarHandle as_memused$VH() {
        return audit_stat.as_memused$VH;
    }
    public static int as_memused$get(MemorySegment seg) {
        return (int)audit_stat.as_memused$VH.get(seg);
    }
    public static void as_memused$set( MemorySegment seg, int x) {
        audit_stat.as_memused$VH.set(seg, x);
    }
    public static int as_memused$get(MemorySegment seg, long index) {
        return (int)audit_stat.as_memused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void as_memused$set(MemorySegment seg, long index, int x) {
        audit_stat.as_memused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


