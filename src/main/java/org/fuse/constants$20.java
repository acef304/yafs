// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$20 {

    static final FunctionDescriptor setauid$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle setauid$MH = RuntimeHelper.downcallHandle(
        "setauid",
        constants$20.setauid$FUNC
    );
    static final FunctionDescriptor getaudit_addr$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle getaudit_addr$MH = RuntimeHelper.downcallHandle(
        "getaudit_addr",
        constants$20.getaudit_addr$FUNC
    );
    static final FunctionDescriptor setaudit_addr$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle setaudit_addr$MH = RuntimeHelper.downcallHandle(
        "setaudit_addr",
        constants$20.setaudit_addr$FUNC
    );
    static final FunctionDescriptor getaudit$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getaudit$MH = RuntimeHelper.downcallHandle(
        "getaudit",
        constants$20.getaudit$FUNC
    );
    static final FunctionDescriptor setaudit$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle setaudit$MH = RuntimeHelper.downcallHandle(
        "setaudit",
        constants$20.setaudit$FUNC
    );
    static final FunctionDescriptor audit_session_self$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle audit_session_self$MH = RuntimeHelper.downcallHandle(
        "audit_session_self",
        constants$20.audit_session_self$FUNC
    );
}


