// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class auditpinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("ap_pid"),
        Constants$root.C_INT$LAYOUT.withName("ap_auid"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("am_success"),
            Constants$root.C_INT$LAYOUT.withName("am_failure")
        ).withName("ap_mask"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("port"),
            Constants$root.C_INT$LAYOUT.withName("machine")
        ).withName("ap_termid"),
        Constants$root.C_INT$LAYOUT.withName("ap_asid")
    ).withName("auditpinfo");
    public static MemoryLayout $LAYOUT() {
        return auditpinfo.$struct$LAYOUT;
    }
    static final VarHandle ap_pid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ap_pid"));
    public static VarHandle ap_pid$VH() {
        return auditpinfo.ap_pid$VH;
    }
    public static int ap_pid$get(MemorySegment seg) {
        return (int)auditpinfo.ap_pid$VH.get(seg);
    }
    public static void ap_pid$set( MemorySegment seg, int x) {
        auditpinfo.ap_pid$VH.set(seg, x);
    }
    public static int ap_pid$get(MemorySegment seg, long index) {
        return (int)auditpinfo.ap_pid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ap_pid$set(MemorySegment seg, long index, int x) {
        auditpinfo.ap_pid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ap_auid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ap_auid"));
    public static VarHandle ap_auid$VH() {
        return auditpinfo.ap_auid$VH;
    }
    public static int ap_auid$get(MemorySegment seg) {
        return (int)auditpinfo.ap_auid$VH.get(seg);
    }
    public static void ap_auid$set( MemorySegment seg, int x) {
        auditpinfo.ap_auid$VH.set(seg, x);
    }
    public static int ap_auid$get(MemorySegment seg, long index) {
        return (int)auditpinfo.ap_auid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ap_auid$set(MemorySegment seg, long index, int x) {
        auditpinfo.ap_auid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ap_mask$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment ap_termid$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    static final VarHandle ap_asid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ap_asid"));
    public static VarHandle ap_asid$VH() {
        return auditpinfo.ap_asid$VH;
    }
    public static int ap_asid$get(MemorySegment seg) {
        return (int)auditpinfo.ap_asid$VH.get(seg);
    }
    public static void ap_asid$set( MemorySegment seg, int x) {
        auditpinfo.ap_asid$VH.set(seg, x);
    }
    public static int ap_asid$get(MemorySegment seg, long index) {
        return (int)auditpinfo.ap_asid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ap_asid$set(MemorySegment seg, long index, int x) {
        auditpinfo.ap_asid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


