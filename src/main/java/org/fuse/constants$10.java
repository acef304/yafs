// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$10 {

    static final FunctionDescriptor openat$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle openat$MH = RuntimeHelper.downcallHandleVariadic(
        "openat",
        constants$10.openat$FUNC
    );
    static final FunctionDescriptor creat$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle creat$MH = RuntimeHelper.downcallHandle(
        "creat",
        constants$10.creat$FUNC
    );
    static final FunctionDescriptor fcntl$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle fcntl$MH = RuntimeHelper.downcallHandleVariadic(
        "fcntl",
        constants$10.fcntl$FUNC
    );
    static final FunctionDescriptor openx_np$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle openx_np$MH = RuntimeHelper.downcallHandle(
        "openx_np",
        constants$10.openx_np$FUNC
    );
    static final FunctionDescriptor open_dprotected_np$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle open_dprotected_np$MH = RuntimeHelper.downcallHandleVariadic(
        "open_dprotected_np",
        constants$10.open_dprotected_np$FUNC
    );
    static final FunctionDescriptor flock$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle flock$MH = RuntimeHelper.downcallHandle(
        "flock",
        constants$10.flock$FUNC
    );
}


