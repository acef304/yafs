// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class setattr_x {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("valid"),
        Constants$root.C_SHORT$LAYOUT.withName("mode"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("uid"),
        Constants$root.C_INT$LAYOUT.withName("gid"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("size"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_nsec")
        ).withName("acctime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_nsec")
        ).withName("modtime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_nsec")
        ).withName("crtime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_nsec")
        ).withName("chgtime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_nsec")
        ).withName("bkuptime"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("setattr_x");
    public static MemoryLayout $LAYOUT() {
        return setattr_x.$struct$LAYOUT;
    }
    static final VarHandle valid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("valid"));
    public static VarHandle valid$VH() {
        return setattr_x.valid$VH;
    }
    public static int valid$get(MemorySegment seg) {
        return (int)setattr_x.valid$VH.get(seg);
    }
    public static void valid$set( MemorySegment seg, int x) {
        setattr_x.valid$VH.set(seg, x);
    }
    public static int valid$get(MemorySegment seg, long index) {
        return (int)setattr_x.valid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void valid$set(MemorySegment seg, long index, int x) {
        setattr_x.valid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mode"));
    public static VarHandle mode$VH() {
        return setattr_x.mode$VH;
    }
    public static short mode$get(MemorySegment seg) {
        return (short)setattr_x.mode$VH.get(seg);
    }
    public static void mode$set( MemorySegment seg, short x) {
        setattr_x.mode$VH.set(seg, x);
    }
    public static short mode$get(MemorySegment seg, long index) {
        return (short)setattr_x.mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mode$set(MemorySegment seg, long index, short x) {
        setattr_x.mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uid"));
    public static VarHandle uid$VH() {
        return setattr_x.uid$VH;
    }
    public static int uid$get(MemorySegment seg) {
        return (int)setattr_x.uid$VH.get(seg);
    }
    public static void uid$set( MemorySegment seg, int x) {
        setattr_x.uid$VH.set(seg, x);
    }
    public static int uid$get(MemorySegment seg, long index) {
        return (int)setattr_x.uid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uid$set(MemorySegment seg, long index, int x) {
        setattr_x.uid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gid"));
    public static VarHandle gid$VH() {
        return setattr_x.gid$VH;
    }
    public static int gid$get(MemorySegment seg) {
        return (int)setattr_x.gid$VH.get(seg);
    }
    public static void gid$set( MemorySegment seg, int x) {
        setattr_x.gid$VH.set(seg, x);
    }
    public static int gid$get(MemorySegment seg, long index) {
        return (int)setattr_x.gid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gid$set(MemorySegment seg, long index, int x) {
        setattr_x.gid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return setattr_x.size$VH;
    }
    public static long size$get(MemorySegment seg) {
        return (long)setattr_x.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, long x) {
        setattr_x.size$VH.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)setattr_x.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        setattr_x.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment acctime$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static MemorySegment modtime$slice(MemorySegment seg) {
        return seg.asSlice(40, 16);
    }
    public static MemorySegment crtime$slice(MemorySegment seg) {
        return seg.asSlice(56, 16);
    }
    public static MemorySegment chgtime$slice(MemorySegment seg) {
        return seg.asSlice(72, 16);
    }
    public static MemorySegment bkuptime$slice(MemorySegment seg) {
        return seg.asSlice(88, 16);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return setattr_x.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)setattr_x.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        setattr_x.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)setattr_x.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        setattr_x.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


