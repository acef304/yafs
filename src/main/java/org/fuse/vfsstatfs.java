// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class vfsstatfs {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("f_bsize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_iosize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_blocks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_bfree"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_bavail"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_bused"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_files"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_ffree"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(2, Constants$root.C_INT$LAYOUT).withName("val")
        ).withName("f_fsid"),
        Constants$root.C_INT$LAYOUT.withName("f_owner"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("f_flags"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("f_fstypename"),
        MemoryLayout.sequenceLayout(1024, Constants$root.C_CHAR$LAYOUT).withName("f_mntonname"),
        MemoryLayout.sequenceLayout(1024, Constants$root.C_CHAR$LAYOUT).withName("f_mntfromname"),
        Constants$root.C_INT$LAYOUT.withName("f_fssubtype"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName("f_reserved")
    ).withName("vfsstatfs");
    public static MemoryLayout $LAYOUT() {
        return vfsstatfs.$struct$LAYOUT;
    }
    static final VarHandle f_bsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_bsize"));
    public static VarHandle f_bsize$VH() {
        return vfsstatfs.f_bsize$VH;
    }
    public static int f_bsize$get(MemorySegment seg) {
        return (int)vfsstatfs.f_bsize$VH.get(seg);
    }
    public static void f_bsize$set( MemorySegment seg, int x) {
        vfsstatfs.f_bsize$VH.set(seg, x);
    }
    public static int f_bsize$get(MemorySegment seg, long index) {
        return (int)vfsstatfs.f_bsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_bsize$set(MemorySegment seg, long index, int x) {
        vfsstatfs.f_bsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_iosize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_iosize"));
    public static VarHandle f_iosize$VH() {
        return vfsstatfs.f_iosize$VH;
    }
    public static long f_iosize$get(MemorySegment seg) {
        return (long)vfsstatfs.f_iosize$VH.get(seg);
    }
    public static void f_iosize$set( MemorySegment seg, long x) {
        vfsstatfs.f_iosize$VH.set(seg, x);
    }
    public static long f_iosize$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_iosize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_iosize$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_iosize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_blocks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_blocks"));
    public static VarHandle f_blocks$VH() {
        return vfsstatfs.f_blocks$VH;
    }
    public static long f_blocks$get(MemorySegment seg) {
        return (long)vfsstatfs.f_blocks$VH.get(seg);
    }
    public static void f_blocks$set( MemorySegment seg, long x) {
        vfsstatfs.f_blocks$VH.set(seg, x);
    }
    public static long f_blocks$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_blocks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_blocks$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_blocks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_bfree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_bfree"));
    public static VarHandle f_bfree$VH() {
        return vfsstatfs.f_bfree$VH;
    }
    public static long f_bfree$get(MemorySegment seg) {
        return (long)vfsstatfs.f_bfree$VH.get(seg);
    }
    public static void f_bfree$set( MemorySegment seg, long x) {
        vfsstatfs.f_bfree$VH.set(seg, x);
    }
    public static long f_bfree$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_bfree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_bfree$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_bfree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_bavail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_bavail"));
    public static VarHandle f_bavail$VH() {
        return vfsstatfs.f_bavail$VH;
    }
    public static long f_bavail$get(MemorySegment seg) {
        return (long)vfsstatfs.f_bavail$VH.get(seg);
    }
    public static void f_bavail$set( MemorySegment seg, long x) {
        vfsstatfs.f_bavail$VH.set(seg, x);
    }
    public static long f_bavail$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_bavail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_bavail$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_bavail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_bused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_bused"));
    public static VarHandle f_bused$VH() {
        return vfsstatfs.f_bused$VH;
    }
    public static long f_bused$get(MemorySegment seg) {
        return (long)vfsstatfs.f_bused$VH.get(seg);
    }
    public static void f_bused$set( MemorySegment seg, long x) {
        vfsstatfs.f_bused$VH.set(seg, x);
    }
    public static long f_bused$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_bused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_bused$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_bused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_files$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_files"));
    public static VarHandle f_files$VH() {
        return vfsstatfs.f_files$VH;
    }
    public static long f_files$get(MemorySegment seg) {
        return (long)vfsstatfs.f_files$VH.get(seg);
    }
    public static void f_files$set( MemorySegment seg, long x) {
        vfsstatfs.f_files$VH.set(seg, x);
    }
    public static long f_files$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_files$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_files$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_files$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_ffree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_ffree"));
    public static VarHandle f_ffree$VH() {
        return vfsstatfs.f_ffree$VH;
    }
    public static long f_ffree$get(MemorySegment seg) {
        return (long)vfsstatfs.f_ffree$VH.get(seg);
    }
    public static void f_ffree$set( MemorySegment seg, long x) {
        vfsstatfs.f_ffree$VH.set(seg, x);
    }
    public static long f_ffree$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_ffree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_ffree$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_ffree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment f_fsid$slice(MemorySegment seg) {
        return seg.asSlice(60, 8);
    }
    static final VarHandle f_owner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_owner"));
    public static VarHandle f_owner$VH() {
        return vfsstatfs.f_owner$VH;
    }
    public static int f_owner$get(MemorySegment seg) {
        return (int)vfsstatfs.f_owner$VH.get(seg);
    }
    public static void f_owner$set( MemorySegment seg, int x) {
        vfsstatfs.f_owner$VH.set(seg, x);
    }
    public static int f_owner$get(MemorySegment seg, long index) {
        return (int)vfsstatfs.f_owner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_owner$set(MemorySegment seg, long index, int x) {
        vfsstatfs.f_owner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_flags"));
    public static VarHandle f_flags$VH() {
        return vfsstatfs.f_flags$VH;
    }
    public static long f_flags$get(MemorySegment seg) {
        return (long)vfsstatfs.f_flags$VH.get(seg);
    }
    public static void f_flags$set( MemorySegment seg, long x) {
        vfsstatfs.f_flags$VH.set(seg, x);
    }
    public static long f_flags$get(MemorySegment seg, long index) {
        return (long)vfsstatfs.f_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_flags$set(MemorySegment seg, long index, long x) {
        vfsstatfs.f_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment f_fstypename$slice(MemorySegment seg) {
        return seg.asSlice(80, 16);
    }
    public static MemorySegment f_mntonname$slice(MemorySegment seg) {
        return seg.asSlice(96, 1024);
    }
    public static MemorySegment f_mntfromname$slice(MemorySegment seg) {
        return seg.asSlice(1120, 1024);
    }
    static final VarHandle f_fssubtype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_fssubtype"));
    public static VarHandle f_fssubtype$VH() {
        return vfsstatfs.f_fssubtype$VH;
    }
    public static int f_fssubtype$get(MemorySegment seg) {
        return (int)vfsstatfs.f_fssubtype$VH.get(seg);
    }
    public static void f_fssubtype$set( MemorySegment seg, int x) {
        vfsstatfs.f_fssubtype$VH.set(seg, x);
    }
    public static int f_fssubtype$get(MemorySegment seg, long index) {
        return (int)vfsstatfs.f_fssubtype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_fssubtype$set(MemorySegment seg, long index, int x) {
        vfsstatfs.f_fssubtype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment f_reserved$slice(MemorySegment seg) {
        return seg.asSlice(2148, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


