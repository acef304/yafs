// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class vfsidctl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("vc_vers"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(2, Constants$root.C_INT$LAYOUT).withName("val")
        ).withName("vc_fsid"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("vc_ptr"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("vc_len"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_INT$LAYOUT).withName("vc_spare")
    ).withName("vfsidctl");
    public static MemoryLayout $LAYOUT() {
        return vfsidctl.$struct$LAYOUT;
    }
    static final VarHandle vc_vers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vc_vers"));
    public static VarHandle vc_vers$VH() {
        return vfsidctl.vc_vers$VH;
    }
    public static int vc_vers$get(MemorySegment seg) {
        return (int)vfsidctl.vc_vers$VH.get(seg);
    }
    public static void vc_vers$set( MemorySegment seg, int x) {
        vfsidctl.vc_vers$VH.set(seg, x);
    }
    public static int vc_vers$get(MemorySegment seg, long index) {
        return (int)vfsidctl.vc_vers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vc_vers$set(MemorySegment seg, long index, int x) {
        vfsidctl.vc_vers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment vc_fsid$slice(MemorySegment seg) {
        return seg.asSlice(4, 8);
    }
    static final VarHandle vc_ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vc_ptr"));
    public static VarHandle vc_ptr$VH() {
        return vfsidctl.vc_ptr$VH;
    }
    public static MemoryAddress vc_ptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)vfsidctl.vc_ptr$VH.get(seg);
    }
    public static void vc_ptr$set( MemorySegment seg, MemoryAddress x) {
        vfsidctl.vc_ptr$VH.set(seg, x);
    }
    public static MemoryAddress vc_ptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)vfsidctl.vc_ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vc_ptr$set(MemorySegment seg, long index, MemoryAddress x) {
        vfsidctl.vc_ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vc_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vc_len"));
    public static VarHandle vc_len$VH() {
        return vfsidctl.vc_len$VH;
    }
    public static long vc_len$get(MemorySegment seg) {
        return (long)vfsidctl.vc_len$VH.get(seg);
    }
    public static void vc_len$set( MemorySegment seg, long x) {
        vfsidctl.vc_len$VH.set(seg, x);
    }
    public static long vc_len$get(MemorySegment seg, long index) {
        return (long)vfsidctl.vc_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vc_len$set(MemorySegment seg, long index, long x) {
        vfsidctl.vc_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment vc_spare$slice(MemorySegment seg) {
        return seg.asSlice(32, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


