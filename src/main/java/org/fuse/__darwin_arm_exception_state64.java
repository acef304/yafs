// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __darwin_arm_exception_state64 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("__far"),
        Constants$root.C_INT$LAYOUT.withName("__esr"),
        Constants$root.C_INT$LAYOUT.withName("__exception")
    ).withName("__darwin_arm_exception_state64");
    public static MemoryLayout $LAYOUT() {
        return __darwin_arm_exception_state64.$struct$LAYOUT;
    }
    static final VarHandle __far$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__far"));
    public static VarHandle __far$VH() {
        return __darwin_arm_exception_state64.__far$VH;
    }
    public static long __far$get(MemorySegment seg) {
        return (long)__darwin_arm_exception_state64.__far$VH.get(seg);
    }
    public static void __far$set( MemorySegment seg, long x) {
        __darwin_arm_exception_state64.__far$VH.set(seg, x);
    }
    public static long __far$get(MemorySegment seg, long index) {
        return (long)__darwin_arm_exception_state64.__far$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __far$set(MemorySegment seg, long index, long x) {
        __darwin_arm_exception_state64.__far$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __esr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__esr"));
    public static VarHandle __esr$VH() {
        return __darwin_arm_exception_state64.__esr$VH;
    }
    public static int __esr$get(MemorySegment seg) {
        return (int)__darwin_arm_exception_state64.__esr$VH.get(seg);
    }
    public static void __esr$set( MemorySegment seg, int x) {
        __darwin_arm_exception_state64.__esr$VH.set(seg, x);
    }
    public static int __esr$get(MemorySegment seg, long index) {
        return (int)__darwin_arm_exception_state64.__esr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __esr$set(MemorySegment seg, long index, int x) {
        __darwin_arm_exception_state64.__esr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __exception$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__exception"));
    public static VarHandle __exception$VH() {
        return __darwin_arm_exception_state64.__exception$VH;
    }
    public static int __exception$get(MemorySegment seg) {
        return (int)__darwin_arm_exception_state64.__exception$VH.get(seg);
    }
    public static void __exception$set( MemorySegment seg, int x) {
        __darwin_arm_exception_state64.__exception$VH.set(seg, x);
    }
    public static int __exception$get(MemorySegment seg, long index) {
        return (int)__darwin_arm_exception_state64.__exception$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __exception$set(MemorySegment seg, long index, int x) {
        __darwin_arm_exception_state64.__exception$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


