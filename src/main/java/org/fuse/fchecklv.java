// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fchecklv {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("lv_file_start"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lv_error_message_size"),
        Constants$root.C_POINTER$LAYOUT.withName("lv_error_message")
    ).withName("fchecklv");
    public static MemoryLayout $LAYOUT() {
        return fchecklv.$struct$LAYOUT;
    }
    static final VarHandle lv_file_start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lv_file_start"));
    public static VarHandle lv_file_start$VH() {
        return fchecklv.lv_file_start$VH;
    }
    public static long lv_file_start$get(MemorySegment seg) {
        return (long)fchecklv.lv_file_start$VH.get(seg);
    }
    public static void lv_file_start$set( MemorySegment seg, long x) {
        fchecklv.lv_file_start$VH.set(seg, x);
    }
    public static long lv_file_start$get(MemorySegment seg, long index) {
        return (long)fchecklv.lv_file_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lv_file_start$set(MemorySegment seg, long index, long x) {
        fchecklv.lv_file_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lv_error_message_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lv_error_message_size"));
    public static VarHandle lv_error_message_size$VH() {
        return fchecklv.lv_error_message_size$VH;
    }
    public static long lv_error_message_size$get(MemorySegment seg) {
        return (long)fchecklv.lv_error_message_size$VH.get(seg);
    }
    public static void lv_error_message_size$set( MemorySegment seg, long x) {
        fchecklv.lv_error_message_size$VH.set(seg, x);
    }
    public static long lv_error_message_size$get(MemorySegment seg, long index) {
        return (long)fchecklv.lv_error_message_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lv_error_message_size$set(MemorySegment seg, long index, long x) {
        fchecklv.lv_error_message_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lv_error_message$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lv_error_message"));
    public static VarHandle lv_error_message$VH() {
        return fchecklv.lv_error_message$VH;
    }
    public static MemoryAddress lv_error_message$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fchecklv.lv_error_message$VH.get(seg);
    }
    public static void lv_error_message$set( MemorySegment seg, MemoryAddress x) {
        fchecklv.lv_error_message$VH.set(seg, x);
    }
    public static MemoryAddress lv_error_message$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fchecklv.lv_error_message$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lv_error_message$set(MemorySegment seg, long index, MemoryAddress x) {
        fchecklv.lv_error_message$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


