// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fuse_module {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("factory"),
        Constants$root.C_POINTER$LAYOUT.withName("next"),
        Constants$root.C_POINTER$LAYOUT.withName("so"),
        Constants$root.C_INT$LAYOUT.withName("ctr"),
        MemoryLayout.paddingLayout(32)
    ).withName("fuse_module");
    public static MemoryLayout $LAYOUT() {
        return fuse_module.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return fuse_module.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fuse_module.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        fuse_module.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fuse_module.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        fuse_module.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor factory$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle factory$MH = RuntimeHelper.downcallHandle(
        fuse_module.factory$FUNC
    );
    public interface factory {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(factory fi, MemorySession session) {
            return RuntimeHelper.upcallStub(factory.class, fi, fuse_module.factory$FUNC, session);
        }
        static factory ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)fuse_module.factory$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle factory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("factory"));
    public static VarHandle factory$VH() {
        return fuse_module.factory$VH;
    }
    public static MemoryAddress factory$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fuse_module.factory$VH.get(seg);
    }
    public static void factory$set( MemorySegment seg, MemoryAddress x) {
        fuse_module.factory$VH.set(seg, x);
    }
    public static MemoryAddress factory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fuse_module.factory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void factory$set(MemorySegment seg, long index, MemoryAddress x) {
        fuse_module.factory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static factory factory (MemorySegment segment, MemorySession session) {
        return factory.ofAddress(factory$get(segment), session);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return fuse_module.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fuse_module.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        fuse_module.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fuse_module.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        fuse_module.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle so$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("so"));
    public static VarHandle so$VH() {
        return fuse_module.so$VH;
    }
    public static MemoryAddress so$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fuse_module.so$VH.get(seg);
    }
    public static void so$set( MemorySegment seg, MemoryAddress x) {
        fuse_module.so$VH.set(seg, x);
    }
    public static MemoryAddress so$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fuse_module.so$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void so$set(MemorySegment seg, long index, MemoryAddress x) {
        fuse_module.so$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ctr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ctr"));
    public static VarHandle ctr$VH() {
        return fuse_module.ctr$VH;
    }
    public static int ctr$get(MemorySegment seg) {
        return (int)fuse_module.ctr$VH.get(seg);
    }
    public static void ctr$set( MemorySegment seg, int x) {
        fuse_module.ctr$VH.set(seg, x);
    }
    public static int ctr$get(MemorySegment seg, long index) {
        return (int)fuse_module.ctr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ctr$set(MemorySegment seg, long index, int x) {
        fuse_module.ctr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


