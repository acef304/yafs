// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __darwin_mcontext64 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("__far"),
            Constants$root.C_INT$LAYOUT.withName("__esr"),
            Constants$root.C_INT$LAYOUT.withName("__exception")
        ).withName("__es"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(29, Constants$root.C_LONG_LONG$LAYOUT).withName("__x"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__fp"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__lr"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__sp"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__pc"),
            Constants$root.C_INT$LAYOUT.withName("__cpsr"),
            Constants$root.C_INT$LAYOUT.withName("__pad")
        ).withName("__ss"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(32, MemoryLayout.paddingLayout(128).withName("__int128")).withName("__v"),
            Constants$root.C_INT$LAYOUT.withName("__fpsr"),
            Constants$root.C_INT$LAYOUT.withName("__fpcr"),
            MemoryLayout.paddingLayout(64)
        ).withName("__ns")
    ).withName("__darwin_mcontext64");
    public static MemoryLayout $LAYOUT() {
        return __darwin_mcontext64.$struct$LAYOUT;
    }
    public static MemorySegment __es$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment __ss$slice(MemorySegment seg) {
        return seg.asSlice(16, 272);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


