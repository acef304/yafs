// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class netfs_status {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("ns_status"),
        MemoryLayout.sequenceLayout(512, Constants$root.C_CHAR$LAYOUT).withName("ns_mountopts"),
        Constants$root.C_INT$LAYOUT.withName("ns_waittime"),
        Constants$root.C_INT$LAYOUT.withName("ns_threadcount"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(0, Constants$root.C_LONG_LONG$LAYOUT).withName("ns_threadids")
    ).withName("netfs_status");
    public static MemoryLayout $LAYOUT() {
        return netfs_status.$struct$LAYOUT;
    }
    static final VarHandle ns_status$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ns_status"));
    public static VarHandle ns_status$VH() {
        return netfs_status.ns_status$VH;
    }
    public static int ns_status$get(MemorySegment seg) {
        return (int)netfs_status.ns_status$VH.get(seg);
    }
    public static void ns_status$set( MemorySegment seg, int x) {
        netfs_status.ns_status$VH.set(seg, x);
    }
    public static int ns_status$get(MemorySegment seg, long index) {
        return (int)netfs_status.ns_status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ns_status$set(MemorySegment seg, long index, int x) {
        netfs_status.ns_status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ns_mountopts$slice(MemorySegment seg) {
        return seg.asSlice(4, 512);
    }
    static final VarHandle ns_waittime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ns_waittime"));
    public static VarHandle ns_waittime$VH() {
        return netfs_status.ns_waittime$VH;
    }
    public static int ns_waittime$get(MemorySegment seg) {
        return (int)netfs_status.ns_waittime$VH.get(seg);
    }
    public static void ns_waittime$set( MemorySegment seg, int x) {
        netfs_status.ns_waittime$VH.set(seg, x);
    }
    public static int ns_waittime$get(MemorySegment seg, long index) {
        return (int)netfs_status.ns_waittime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ns_waittime$set(MemorySegment seg, long index, int x) {
        netfs_status.ns_waittime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ns_threadcount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ns_threadcount"));
    public static VarHandle ns_threadcount$VH() {
        return netfs_status.ns_threadcount$VH;
    }
    public static int ns_threadcount$get(MemorySegment seg) {
        return (int)netfs_status.ns_threadcount$VH.get(seg);
    }
    public static void ns_threadcount$set( MemorySegment seg, int x) {
        netfs_status.ns_threadcount$VH.set(seg, x);
    }
    public static int ns_threadcount$get(MemorySegment seg, long index) {
        return (int)netfs_status.ns_threadcount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ns_threadcount$set(MemorySegment seg, long index, int x) {
        netfs_status.ns_threadcount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


