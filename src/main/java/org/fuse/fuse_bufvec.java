// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fuse_bufvec {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("count"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("idx"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("off"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("size"),
            Constants$root.C_INT$LAYOUT.withName("flags"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("mem"),
            Constants$root.C_INT$LAYOUT.withName("fd"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("pos")
        ).withName("fuse_buf")).withName("buf")
    ).withName("fuse_bufvec");
    public static MemoryLayout $LAYOUT() {
        return fuse_bufvec.$struct$LAYOUT;
    }
    static final VarHandle count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("count"));
    public static VarHandle count$VH() {
        return fuse_bufvec.count$VH;
    }
    public static long count$get(MemorySegment seg) {
        return (long)fuse_bufvec.count$VH.get(seg);
    }
    public static void count$set( MemorySegment seg, long x) {
        fuse_bufvec.count$VH.set(seg, x);
    }
    public static long count$get(MemorySegment seg, long index) {
        return (long)fuse_bufvec.count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, long x) {
        fuse_bufvec.count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("idx"));
    public static VarHandle idx$VH() {
        return fuse_bufvec.idx$VH;
    }
    public static long idx$get(MemorySegment seg) {
        return (long)fuse_bufvec.idx$VH.get(seg);
    }
    public static void idx$set( MemorySegment seg, long x) {
        fuse_bufvec.idx$VH.set(seg, x);
    }
    public static long idx$get(MemorySegment seg, long index) {
        return (long)fuse_bufvec.idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void idx$set(MemorySegment seg, long index, long x) {
        fuse_bufvec.idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle off$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("off"));
    public static VarHandle off$VH() {
        return fuse_bufvec.off$VH;
    }
    public static long off$get(MemorySegment seg) {
        return (long)fuse_bufvec.off$VH.get(seg);
    }
    public static void off$set( MemorySegment seg, long x) {
        fuse_bufvec.off$VH.set(seg, x);
    }
    public static long off$get(MemorySegment seg, long index) {
        return (long)fuse_bufvec.off$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void off$set(MemorySegment seg, long index, long x) {
        fuse_bufvec.off$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment buf$slice(MemorySegment seg) {
        return seg.asSlice(24, 40);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


