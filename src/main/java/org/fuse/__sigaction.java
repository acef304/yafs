// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __sigaction {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("__sa_handler"),
            Constants$root.C_POINTER$LAYOUT.withName("__sa_sigaction")
        ).withName("__sigaction_u"),
        Constants$root.C_POINTER$LAYOUT.withName("sa_tramp"),
        Constants$root.C_INT$LAYOUT.withName("sa_mask"),
        Constants$root.C_INT$LAYOUT.withName("sa_flags")
    ).withName("__sigaction");
    public static MemoryLayout $LAYOUT() {
        return __sigaction.$struct$LAYOUT;
    }
    public static MemorySegment __sigaction_u$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final FunctionDescriptor sa_tramp$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sa_tramp$MH = RuntimeHelper.downcallHandle(
        __sigaction.sa_tramp$FUNC
    );
    public interface sa_tramp {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(sa_tramp fi, MemorySession session) {
            return RuntimeHelper.upcallStub(sa_tramp.class, fi, __sigaction.sa_tramp$FUNC, session);
        }
        static sa_tramp ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    __sigaction.sa_tramp$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle sa_tramp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sa_tramp"));
    public static VarHandle sa_tramp$VH() {
        return __sigaction.sa_tramp$VH;
    }
    public static MemoryAddress sa_tramp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sigaction.sa_tramp$VH.get(seg);
    }
    public static void sa_tramp$set( MemorySegment seg, MemoryAddress x) {
        __sigaction.sa_tramp$VH.set(seg, x);
    }
    public static MemoryAddress sa_tramp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sigaction.sa_tramp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_tramp$set(MemorySegment seg, long index, MemoryAddress x) {
        __sigaction.sa_tramp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sa_tramp sa_tramp (MemorySegment segment, MemorySession session) {
        return sa_tramp.ofAddress(sa_tramp$get(segment), session);
    }
    static final VarHandle sa_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sa_mask"));
    public static VarHandle sa_mask$VH() {
        return __sigaction.sa_mask$VH;
    }
    public static int sa_mask$get(MemorySegment seg) {
        return (int)__sigaction.sa_mask$VH.get(seg);
    }
    public static void sa_mask$set( MemorySegment seg, int x) {
        __sigaction.sa_mask$VH.set(seg, x);
    }
    public static int sa_mask$get(MemorySegment seg, long index) {
        return (int)__sigaction.sa_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_mask$set(MemorySegment seg, long index, int x) {
        __sigaction.sa_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sa_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sa_flags"));
    public static VarHandle sa_flags$VH() {
        return __sigaction.sa_flags$VH;
    }
    public static int sa_flags$get(MemorySegment seg) {
        return (int)__sigaction.sa_flags$VH.get(seg);
    }
    public static void sa_flags$set( MemorySegment seg, int x) {
        __sigaction.sa_flags$VH.set(seg, x);
    }
    public static int sa_flags$get(MemorySegment seg, long index) {
        return (int)__sigaction.sa_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_flags$set(MemorySegment seg, long index, int x) {
        __sigaction.sa_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


