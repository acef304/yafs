// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fbootstraptransfer {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("fbt_offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("fbt_length"),
        Constants$root.C_POINTER$LAYOUT.withName("fbt_buffer")
    ).withName("fbootstraptransfer");
    public static MemoryLayout $LAYOUT() {
        return fbootstraptransfer.$struct$LAYOUT;
    }
    static final VarHandle fbt_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fbt_offset"));
    public static VarHandle fbt_offset$VH() {
        return fbootstraptransfer.fbt_offset$VH;
    }
    public static long fbt_offset$get(MemorySegment seg) {
        return (long)fbootstraptransfer.fbt_offset$VH.get(seg);
    }
    public static void fbt_offset$set( MemorySegment seg, long x) {
        fbootstraptransfer.fbt_offset$VH.set(seg, x);
    }
    public static long fbt_offset$get(MemorySegment seg, long index) {
        return (long)fbootstraptransfer.fbt_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fbt_offset$set(MemorySegment seg, long index, long x) {
        fbootstraptransfer.fbt_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fbt_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fbt_length"));
    public static VarHandle fbt_length$VH() {
        return fbootstraptransfer.fbt_length$VH;
    }
    public static long fbt_length$get(MemorySegment seg) {
        return (long)fbootstraptransfer.fbt_length$VH.get(seg);
    }
    public static void fbt_length$set( MemorySegment seg, long x) {
        fbootstraptransfer.fbt_length$VH.set(seg, x);
    }
    public static long fbt_length$get(MemorySegment seg, long index) {
        return (long)fbootstraptransfer.fbt_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fbt_length$set(MemorySegment seg, long index, long x) {
        fbootstraptransfer.fbt_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fbt_buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fbt_buffer"));
    public static VarHandle fbt_buffer$VH() {
        return fbootstraptransfer.fbt_buffer$VH;
    }
    public static MemoryAddress fbt_buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fbootstraptransfer.fbt_buffer$VH.get(seg);
    }
    public static void fbt_buffer$set( MemorySegment seg, MemoryAddress x) {
        fbootstraptransfer.fbt_buffer$VH.set(seg, x);
    }
    public static MemoryAddress fbt_buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fbootstraptransfer.fbt_buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fbt_buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        fbootstraptransfer.fbt_buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


