// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class attrlist {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("bitmapcount"),
        Constants$root.C_SHORT$LAYOUT.withName("reserved"),
        Constants$root.C_INT$LAYOUT.withName("commonattr"),
        Constants$root.C_INT$LAYOUT.withName("volattr"),
        Constants$root.C_INT$LAYOUT.withName("dirattr"),
        Constants$root.C_INT$LAYOUT.withName("fileattr"),
        Constants$root.C_INT$LAYOUT.withName("forkattr")
    ).withName("attrlist");
    public static MemoryLayout $LAYOUT() {
        return attrlist.$struct$LAYOUT;
    }
    static final VarHandle bitmapcount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bitmapcount"));
    public static VarHandle bitmapcount$VH() {
        return attrlist.bitmapcount$VH;
    }
    public static short bitmapcount$get(MemorySegment seg) {
        return (short)attrlist.bitmapcount$VH.get(seg);
    }
    public static void bitmapcount$set( MemorySegment seg, short x) {
        attrlist.bitmapcount$VH.set(seg, x);
    }
    public static short bitmapcount$get(MemorySegment seg, long index) {
        return (short)attrlist.bitmapcount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bitmapcount$set(MemorySegment seg, long index, short x) {
        attrlist.bitmapcount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reserved"));
    public static VarHandle reserved$VH() {
        return attrlist.reserved$VH;
    }
    public static short reserved$get(MemorySegment seg) {
        return (short)attrlist.reserved$VH.get(seg);
    }
    public static void reserved$set( MemorySegment seg, short x) {
        attrlist.reserved$VH.set(seg, x);
    }
    public static short reserved$get(MemorySegment seg, long index) {
        return (short)attrlist.reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, short x) {
        attrlist.reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle commonattr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("commonattr"));
    public static VarHandle commonattr$VH() {
        return attrlist.commonattr$VH;
    }
    public static int commonattr$get(MemorySegment seg) {
        return (int)attrlist.commonattr$VH.get(seg);
    }
    public static void commonattr$set( MemorySegment seg, int x) {
        attrlist.commonattr$VH.set(seg, x);
    }
    public static int commonattr$get(MemorySegment seg, long index) {
        return (int)attrlist.commonattr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void commonattr$set(MemorySegment seg, long index, int x) {
        attrlist.commonattr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle volattr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("volattr"));
    public static VarHandle volattr$VH() {
        return attrlist.volattr$VH;
    }
    public static int volattr$get(MemorySegment seg) {
        return (int)attrlist.volattr$VH.get(seg);
    }
    public static void volattr$set( MemorySegment seg, int x) {
        attrlist.volattr$VH.set(seg, x);
    }
    public static int volattr$get(MemorySegment seg, long index) {
        return (int)attrlist.volattr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void volattr$set(MemorySegment seg, long index, int x) {
        attrlist.volattr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dirattr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dirattr"));
    public static VarHandle dirattr$VH() {
        return attrlist.dirattr$VH;
    }
    public static int dirattr$get(MemorySegment seg) {
        return (int)attrlist.dirattr$VH.get(seg);
    }
    public static void dirattr$set( MemorySegment seg, int x) {
        attrlist.dirattr$VH.set(seg, x);
    }
    public static int dirattr$get(MemorySegment seg, long index) {
        return (int)attrlist.dirattr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dirattr$set(MemorySegment seg, long index, int x) {
        attrlist.dirattr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fileattr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fileattr"));
    public static VarHandle fileattr$VH() {
        return attrlist.fileattr$VH;
    }
    public static int fileattr$get(MemorySegment seg) {
        return (int)attrlist.fileattr$VH.get(seg);
    }
    public static void fileattr$set( MemorySegment seg, int x) {
        attrlist.fileattr$VH.set(seg, x);
    }
    public static int fileattr$get(MemorySegment seg, long index) {
        return (int)attrlist.fileattr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fileattr$set(MemorySegment seg, long index, int x) {
        attrlist.fileattr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle forkattr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("forkattr"));
    public static VarHandle forkattr$VH() {
        return attrlist.forkattr$VH;
    }
    public static int forkattr$get(MemorySegment seg) {
        return (int)attrlist.forkattr$VH.get(seg);
    }
    public static void forkattr$set( MemorySegment seg, int x) {
        attrlist.forkattr$VH.set(seg, x);
    }
    public static int forkattr$get(MemorySegment seg, long index) {
        return (int)attrlist.forkattr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void forkattr$set(MemorySegment seg, long index, int x) {
        attrlist.forkattr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


