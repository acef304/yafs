// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class au_qctrl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("aq_hiwater"),
        Constants$root.C_INT$LAYOUT.withName("aq_lowater"),
        Constants$root.C_INT$LAYOUT.withName("aq_bufsz"),
        Constants$root.C_INT$LAYOUT.withName("aq_delay"),
        Constants$root.C_INT$LAYOUT.withName("aq_minfree")
    ).withName("au_qctrl");
    public static MemoryLayout $LAYOUT() {
        return au_qctrl.$struct$LAYOUT;
    }
    static final VarHandle aq_hiwater$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aq_hiwater"));
    public static VarHandle aq_hiwater$VH() {
        return au_qctrl.aq_hiwater$VH;
    }
    public static int aq_hiwater$get(MemorySegment seg) {
        return (int)au_qctrl.aq_hiwater$VH.get(seg);
    }
    public static void aq_hiwater$set( MemorySegment seg, int x) {
        au_qctrl.aq_hiwater$VH.set(seg, x);
    }
    public static int aq_hiwater$get(MemorySegment seg, long index) {
        return (int)au_qctrl.aq_hiwater$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aq_hiwater$set(MemorySegment seg, long index, int x) {
        au_qctrl.aq_hiwater$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aq_lowater$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aq_lowater"));
    public static VarHandle aq_lowater$VH() {
        return au_qctrl.aq_lowater$VH;
    }
    public static int aq_lowater$get(MemorySegment seg) {
        return (int)au_qctrl.aq_lowater$VH.get(seg);
    }
    public static void aq_lowater$set( MemorySegment seg, int x) {
        au_qctrl.aq_lowater$VH.set(seg, x);
    }
    public static int aq_lowater$get(MemorySegment seg, long index) {
        return (int)au_qctrl.aq_lowater$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aq_lowater$set(MemorySegment seg, long index, int x) {
        au_qctrl.aq_lowater$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aq_bufsz$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aq_bufsz"));
    public static VarHandle aq_bufsz$VH() {
        return au_qctrl.aq_bufsz$VH;
    }
    public static int aq_bufsz$get(MemorySegment seg) {
        return (int)au_qctrl.aq_bufsz$VH.get(seg);
    }
    public static void aq_bufsz$set( MemorySegment seg, int x) {
        au_qctrl.aq_bufsz$VH.set(seg, x);
    }
    public static int aq_bufsz$get(MemorySegment seg, long index) {
        return (int)au_qctrl.aq_bufsz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aq_bufsz$set(MemorySegment seg, long index, int x) {
        au_qctrl.aq_bufsz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aq_delay$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aq_delay"));
    public static VarHandle aq_delay$VH() {
        return au_qctrl.aq_delay$VH;
    }
    public static int aq_delay$get(MemorySegment seg) {
        return (int)au_qctrl.aq_delay$VH.get(seg);
    }
    public static void aq_delay$set( MemorySegment seg, int x) {
        au_qctrl.aq_delay$VH.set(seg, x);
    }
    public static int aq_delay$get(MemorySegment seg, long index) {
        return (int)au_qctrl.aq_delay$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aq_delay$set(MemorySegment seg, long index, int x) {
        au_qctrl.aq_delay$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aq_minfree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aq_minfree"));
    public static VarHandle aq_minfree$VH() {
        return au_qctrl.aq_minfree$VH;
    }
    public static int aq_minfree$get(MemorySegment seg) {
        return (int)au_qctrl.aq_minfree$VH.get(seg);
    }
    public static void aq_minfree$set( MemorySegment seg, int x) {
        au_qctrl.aq_minfree$VH.set(seg, x);
    }
    public static int aq_minfree$get(MemorySegment seg, long index) {
        return (int)au_qctrl.aq_minfree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aq_minfree$set(MemorySegment seg, long index, int x) {
        au_qctrl.aq_minfree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


