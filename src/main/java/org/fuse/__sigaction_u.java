// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __sigaction_u {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_POINTER$LAYOUT.withName("__sa_handler"),
        Constants$root.C_POINTER$LAYOUT.withName("__sa_sigaction")
    ).withName("__sigaction_u");
    public static MemoryLayout $LAYOUT() {
        return __sigaction_u.$union$LAYOUT;
    }
    static final FunctionDescriptor __sa_handler$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle __sa_handler$MH = RuntimeHelper.downcallHandle(
        __sigaction_u.__sa_handler$FUNC
    );
    public interface __sa_handler {

        void apply(int _x0);
        static MemorySegment allocate(__sa_handler fi, MemorySession session) {
            return RuntimeHelper.upcallStub(__sa_handler.class, fi, __sigaction_u.__sa_handler$FUNC, session);
        }
        static __sa_handler ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0) -> {
                try {
                    __sigaction_u.__sa_handler$MH.invokeExact((Addressable)symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle __sa_handler$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__sa_handler"));
    public static VarHandle __sa_handler$VH() {
        return __sigaction_u.__sa_handler$VH;
    }
    public static MemoryAddress __sa_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sigaction_u.__sa_handler$VH.get(seg);
    }
    public static void __sa_handler$set( MemorySegment seg, MemoryAddress x) {
        __sigaction_u.__sa_handler$VH.set(seg, x);
    }
    public static MemoryAddress __sa_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sigaction_u.__sa_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __sa_handler$set(MemorySegment seg, long index, MemoryAddress x) {
        __sigaction_u.__sa_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static __sa_handler __sa_handler (MemorySegment segment, MemorySession session) {
        return __sa_handler.ofAddress(__sa_handler$get(segment), session);
    }
    static final FunctionDescriptor __sa_sigaction$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle __sa_sigaction$MH = RuntimeHelper.downcallHandle(
        __sigaction_u.__sa_sigaction$FUNC
    );
    public interface __sa_sigaction {

        void apply(int _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(__sa_sigaction fi, MemorySession session) {
            return RuntimeHelper.upcallStub(__sa_sigaction.class, fi, __sigaction_u.__sa_sigaction$FUNC, session);
        }
        static __sa_sigaction ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    __sigaction_u.__sa_sigaction$MH.invokeExact((Addressable)symbol, __x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle __sa_sigaction$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__sa_sigaction"));
    public static VarHandle __sa_sigaction$VH() {
        return __sigaction_u.__sa_sigaction$VH;
    }
    public static MemoryAddress __sa_sigaction$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sigaction_u.__sa_sigaction$VH.get(seg);
    }
    public static void __sa_sigaction$set( MemorySegment seg, MemoryAddress x) {
        __sigaction_u.__sa_sigaction$VH.set(seg, x);
    }
    public static MemoryAddress __sa_sigaction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sigaction_u.__sa_sigaction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __sa_sigaction$set(MemorySegment seg, long index, MemoryAddress x) {
        __sigaction_u.__sa_sigaction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static __sa_sigaction __sa_sigaction (MemorySegment segment, MemorySession session) {
        return __sa_sigaction.ofAddress(__sa_sigaction$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


