// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fstore {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("fst_flags"),
        Constants$root.C_INT$LAYOUT.withName("fst_posmode"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("fst_offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("fst_length"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("fst_bytesalloc")
    ).withName("fstore");
    public static MemoryLayout $LAYOUT() {
        return fstore.$struct$LAYOUT;
    }
    static final VarHandle fst_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fst_flags"));
    public static VarHandle fst_flags$VH() {
        return fstore.fst_flags$VH;
    }
    public static int fst_flags$get(MemorySegment seg) {
        return (int)fstore.fst_flags$VH.get(seg);
    }
    public static void fst_flags$set( MemorySegment seg, int x) {
        fstore.fst_flags$VH.set(seg, x);
    }
    public static int fst_flags$get(MemorySegment seg, long index) {
        return (int)fstore.fst_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fst_flags$set(MemorySegment seg, long index, int x) {
        fstore.fst_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fst_posmode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fst_posmode"));
    public static VarHandle fst_posmode$VH() {
        return fstore.fst_posmode$VH;
    }
    public static int fst_posmode$get(MemorySegment seg) {
        return (int)fstore.fst_posmode$VH.get(seg);
    }
    public static void fst_posmode$set( MemorySegment seg, int x) {
        fstore.fst_posmode$VH.set(seg, x);
    }
    public static int fst_posmode$get(MemorySegment seg, long index) {
        return (int)fstore.fst_posmode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fst_posmode$set(MemorySegment seg, long index, int x) {
        fstore.fst_posmode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fst_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fst_offset"));
    public static VarHandle fst_offset$VH() {
        return fstore.fst_offset$VH;
    }
    public static long fst_offset$get(MemorySegment seg) {
        return (long)fstore.fst_offset$VH.get(seg);
    }
    public static void fst_offset$set( MemorySegment seg, long x) {
        fstore.fst_offset$VH.set(seg, x);
    }
    public static long fst_offset$get(MemorySegment seg, long index) {
        return (long)fstore.fst_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fst_offset$set(MemorySegment seg, long index, long x) {
        fstore.fst_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fst_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fst_length"));
    public static VarHandle fst_length$VH() {
        return fstore.fst_length$VH;
    }
    public static long fst_length$get(MemorySegment seg) {
        return (long)fstore.fst_length$VH.get(seg);
    }
    public static void fst_length$set( MemorySegment seg, long x) {
        fstore.fst_length$VH.set(seg, x);
    }
    public static long fst_length$get(MemorySegment seg, long index) {
        return (long)fstore.fst_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fst_length$set(MemorySegment seg, long index, long x) {
        fstore.fst_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fst_bytesalloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fst_bytesalloc"));
    public static VarHandle fst_bytesalloc$VH() {
        return fstore.fst_bytesalloc$VH;
    }
    public static long fst_bytesalloc$get(MemorySegment seg) {
        return (long)fstore.fst_bytesalloc$VH.get(seg);
    }
    public static void fst_bytesalloc$set( MemorySegment seg, long x) {
        fstore.fst_bytesalloc$VH.set(seg, x);
    }
    public static long fst_bytesalloc$get(MemorySegment seg, long index) {
        return (long)fstore.fst_bytesalloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fst_bytesalloc$set(MemorySegment seg, long index, long x) {
        fstore.fst_bytesalloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


