// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class au_evclass_map {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("ec_number"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("ec_class")
    ).withName("au_evclass_map");
    public static MemoryLayout $LAYOUT() {
        return au_evclass_map.$struct$LAYOUT;
    }
    static final VarHandle ec_number$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ec_number"));
    public static VarHandle ec_number$VH() {
        return au_evclass_map.ec_number$VH;
    }
    public static short ec_number$get(MemorySegment seg) {
        return (short)au_evclass_map.ec_number$VH.get(seg);
    }
    public static void ec_number$set( MemorySegment seg, short x) {
        au_evclass_map.ec_number$VH.set(seg, x);
    }
    public static short ec_number$get(MemorySegment seg, long index) {
        return (short)au_evclass_map.ec_number$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ec_number$set(MemorySegment seg, long index, short x) {
        au_evclass_map.ec_number$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ec_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ec_class"));
    public static VarHandle ec_class$VH() {
        return au_evclass_map.ec_class$VH;
    }
    public static int ec_class$get(MemorySegment seg) {
        return (int)au_evclass_map.ec_class$VH.get(seg);
    }
    public static void ec_class$set( MemorySegment seg, int x) {
        au_evclass_map.ec_class$VH.set(seg, x);
    }
    public static int ec_class$get(MemorySegment seg, long index) {
        return (int)au_evclass_map.ec_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ec_class$set(MemorySegment seg, long index, int x) {
        au_evclass_map.ec_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


