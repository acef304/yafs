// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class vfsconf {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("vfc_reserved1"),
        MemoryLayout.sequenceLayout(15, Constants$root.C_CHAR$LAYOUT).withName("vfc_name"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_INT$LAYOUT.withName("vfc_typenum"),
        Constants$root.C_INT$LAYOUT.withName("vfc_refcount"),
        Constants$root.C_INT$LAYOUT.withName("vfc_flags"),
        Constants$root.C_INT$LAYOUT.withName("vfc_reserved2"),
        Constants$root.C_INT$LAYOUT.withName("vfc_reserved3")
    ).withName("vfsconf");
    public static MemoryLayout $LAYOUT() {
        return vfsconf.$struct$LAYOUT;
    }
    static final VarHandle vfc_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vfc_reserved1"));
    public static VarHandle vfc_reserved1$VH() {
        return vfsconf.vfc_reserved1$VH;
    }
    public static int vfc_reserved1$get(MemorySegment seg) {
        return (int)vfsconf.vfc_reserved1$VH.get(seg);
    }
    public static void vfc_reserved1$set( MemorySegment seg, int x) {
        vfsconf.vfc_reserved1$VH.set(seg, x);
    }
    public static int vfc_reserved1$get(MemorySegment seg, long index) {
        return (int)vfsconf.vfc_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vfc_reserved1$set(MemorySegment seg, long index, int x) {
        vfsconf.vfc_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment vfc_name$slice(MemorySegment seg) {
        return seg.asSlice(4, 15);
    }
    static final VarHandle vfc_typenum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vfc_typenum"));
    public static VarHandle vfc_typenum$VH() {
        return vfsconf.vfc_typenum$VH;
    }
    public static int vfc_typenum$get(MemorySegment seg) {
        return (int)vfsconf.vfc_typenum$VH.get(seg);
    }
    public static void vfc_typenum$set( MemorySegment seg, int x) {
        vfsconf.vfc_typenum$VH.set(seg, x);
    }
    public static int vfc_typenum$get(MemorySegment seg, long index) {
        return (int)vfsconf.vfc_typenum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vfc_typenum$set(MemorySegment seg, long index, int x) {
        vfsconf.vfc_typenum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vfc_refcount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vfc_refcount"));
    public static VarHandle vfc_refcount$VH() {
        return vfsconf.vfc_refcount$VH;
    }
    public static int vfc_refcount$get(MemorySegment seg) {
        return (int)vfsconf.vfc_refcount$VH.get(seg);
    }
    public static void vfc_refcount$set( MemorySegment seg, int x) {
        vfsconf.vfc_refcount$VH.set(seg, x);
    }
    public static int vfc_refcount$get(MemorySegment seg, long index) {
        return (int)vfsconf.vfc_refcount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vfc_refcount$set(MemorySegment seg, long index, int x) {
        vfsconf.vfc_refcount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vfc_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vfc_flags"));
    public static VarHandle vfc_flags$VH() {
        return vfsconf.vfc_flags$VH;
    }
    public static int vfc_flags$get(MemorySegment seg) {
        return (int)vfsconf.vfc_flags$VH.get(seg);
    }
    public static void vfc_flags$set( MemorySegment seg, int x) {
        vfsconf.vfc_flags$VH.set(seg, x);
    }
    public static int vfc_flags$get(MemorySegment seg, long index) {
        return (int)vfsconf.vfc_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vfc_flags$set(MemorySegment seg, long index, int x) {
        vfsconf.vfc_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vfc_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vfc_reserved2"));
    public static VarHandle vfc_reserved2$VH() {
        return vfsconf.vfc_reserved2$VH;
    }
    public static int vfc_reserved2$get(MemorySegment seg) {
        return (int)vfsconf.vfc_reserved2$VH.get(seg);
    }
    public static void vfc_reserved2$set( MemorySegment seg, int x) {
        vfsconf.vfc_reserved2$VH.set(seg, x);
    }
    public static int vfc_reserved2$get(MemorySegment seg, long index) {
        return (int)vfsconf.vfc_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vfc_reserved2$set(MemorySegment seg, long index, int x) {
        vfsconf.vfc_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vfc_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vfc_reserved3"));
    public static VarHandle vfc_reserved3$VH() {
        return vfsconf.vfc_reserved3$VH;
    }
    public static int vfc_reserved3$get(MemorySegment seg) {
        return (int)vfsconf.vfc_reserved3$VH.get(seg);
    }
    public static void vfc_reserved3$set( MemorySegment seg, int x) {
        vfsconf.vfc_reserved3$VH.set(seg, x);
    }
    public static int vfc_reserved3$get(MemorySegment seg, long index) {
        return (int)vfsconf.vfc_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vfc_reserved3$set(MemorySegment seg, long index, int x) {
        vfsconf.vfc_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


