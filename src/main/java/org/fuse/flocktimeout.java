// Generated by jextract

package org.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class flocktimeout {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("l_start"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("l_len"),
            Constants$root.C_INT$LAYOUT.withName("l_pid"),
            Constants$root.C_SHORT$LAYOUT.withName("l_type"),
            Constants$root.C_SHORT$LAYOUT.withName("l_whence")
        ).withName("fl"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_nsec")
        ).withName("timeout")
    ).withName("flocktimeout");
    public static MemoryLayout $LAYOUT() {
        return flocktimeout.$struct$LAYOUT;
    }
    public static MemorySegment fl$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment timeout$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


